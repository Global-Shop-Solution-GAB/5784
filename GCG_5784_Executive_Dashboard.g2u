'Rules for ScreenSU:
'If you saved this program after opening the form designer, congratulations, you have broken the tab indexing. Here are the rules for fixing it:
'
' 1. The Control creation should follow this flow:
'        F_Main -> tabDash -> cmdCashRefresh -> frameAR -> lblARSel -> optARInvDate -> optARDueDate -> frameAP -> lblAPSel -> optAPInvDate -> optAPDueDate -> progressPanelCashFlow -> splitARAP -> lblARAging -> gsgcAR -> lblAPAging -> gsgcAP -> gsgcCash -> cmdOrdersRefresh -> frameOrders -> optItemProm -> optShipSched -> gsgcOrders -> lblBegDate -> dtpBegDate -> lblThru -> lblEndDate -> dtpEndDate -> cmdShipRefresh -> gsgcShip -> cmdJobRefresh -> chkParentWOs -> gsgcJob
'	 a. Yes the controls need to be manually copy and pasted so their creation functions and other commands follow this schema.
' 2. All 'gsgc' controls need a '.TabStop(False)' command so that way the program behaves normally. The form designer will eat these commands after you saved the program.
'
'Make sure both of these rules are followed and the program will behave normally again
Program.Sub.ScreenSU.Start
Gui.F_Main..Create(DashForm)
Gui.F_Main..Caption("Executive Dashboard")
Gui.F_Main..Size(1024,715)
Gui.F_Main..MinX(800)
Gui.F_Main..MinY(400)
Gui.F_Main..Position(0,0)
Gui.F_Main..AlwaysOnTop(False)
Gui.F_Main..FontName("Tahoma")
Gui.F_Main..FontSize(8.25)
Gui.F_Main..ControlBox(True)
Gui.F_Main..MaxButton(True)
Gui.F_Main..MinButton(True)
Gui.F_Main..MousePointer(0)
Gui.F_Main..Moveable(True)
Gui.F_Main..Sizeable(True)
Gui.F_Main..ShowInTaskBar(True)
Gui.F_Main..TitleBar(True)
Gui.F_Main..Event(UnLoad,F_Main_UnLoad)
Gui.F_Main..ShowCompanyCode(False)
Gui.F_Main..BarHelpButton(True,"Executive Dashboard","Overview dashboard for shipping/order entry, shop floor control and cash flow summary data.","",1.0.0,"3/4/2020 9:17:00 AM","",0,0,False)
Gui.F_Main..BarRefreshButton(True)
Gui.F_Main..Event(RefreshClick,F_Main_RefreshClick)
Gui.F_Main.tabDash.Create(Tab)
Gui.F_Main.tabDash.Enabled(True)
Gui.F_Main.tabDash.Visible(True)
Gui.F_Main.tabDash.Zorder(0)
Gui.F_Main.tabDash.Size(1024,649)
Gui.F_Main.tabDash.Position(0,0)
Gui.F_Main.tabDash.FontName("Tahoma")
Gui.F_Main.tabDash.FontSize(8.25)
Gui.F_Main.tabDash.Dock(5)
Gui.F_Main.tabDash.Tabs(4)
Gui.F_Main.tabDash.SetTab(0)
Gui.F_Main.tabDash.Caption("Cash Flow Summary")
Gui.F_Main.tabDash.SetTab(1)
Gui.F_Main.tabDash.Caption("Current Back Log Valuation")
Gui.F_Main.tabDash.SetTab(2)
Gui.F_Main.tabDash.Caption("Shipping Analysis")
Gui.F_Main.tabDash.SetTab(3)
Gui.F_Main.tabDash.Caption("Work Order Review")
Gui.F_Main.cmdJobRefresh.Create(Button)
Gui.F_Main.cmdJobRefresh.Enabled(True)
Gui.F_Main.cmdJobRefresh.Visible(True)
Gui.F_Main.cmdJobRefresh.Zorder(0)
Gui.F_Main.cmdJobRefresh.Size(30,30)
Gui.F_Main.cmdJobRefresh.Position(8,7)
Gui.F_Main.cmdJobRefresh.Caption("Refresh")
Gui.F_Main.cmdJobRefresh.FontName("Tahoma")
Gui.F_Main.cmdJobRefresh.FontSize(8.25)
Gui.F_Main.cmdJobRefresh.Parent("tabDash",3)
Gui.F_Main.cmdJobRefresh.Event(Click,cmdJobRefresh_Click)
Gui.F_Main.cmdJobRefresh.TabStop(True)
Gui.F_Main.cmdJobRefresh.TabIndex(1)
Gui.F_Main.gsgcCash.Create(GsGridControl)
Gui.F_Main.gsgcCash.Enabled(True)
Gui.F_Main.gsgcCash.Visible(True)
Gui.F_Main.gsgcCash.Zorder(0)
Gui.F_Main.gsgcCash.Size(204,625)
Gui.F_Main.gsgcCash.Position(818,0)
Gui.F_Main.gsgcCash.Parent("tabDash",0)
Gui.F_Main.gsgcCash.Anchor(9)
Gui.F_Main.gsgcCash.Dock(0)
Gui.F_Main.frameAR.Create(Frame)
Gui.F_Main.frameAR.Enabled(True)
Gui.F_Main.frameAR.Visible(True)
Gui.F_Main.frameAR.Zorder(0)
Gui.F_Main.frameAR.Size(240,38)
Gui.F_Main.frameAR.Position(47,3)
Gui.F_Main.frameAR.Caption("AR Aging")
Gui.F_Main.frameAR.FontName("Tahoma")
Gui.F_Main.frameAR.FontSize(8.25)
Gui.F_Main.frameAR.BorderStyle(0)
Gui.F_Main.frameAR.Parent("tabDash",0)
Gui.F_Main.optARInvDate.Create(Option)
Gui.F_Main.optARInvDate.Enabled(True)
Gui.F_Main.optARInvDate.Visible(True)
Gui.F_Main.optARInvDate.Zorder(0)
Gui.F_Main.optARInvDate.Size(107,24)
Gui.F_Main.optARInvDate.Position(2,17)
Gui.F_Main.optARInvDate.Caption("Use Invoice Date")
Gui.F_Main.optARInvDate.FontName("Tahoma")
Gui.F_Main.optARInvDate.FontSize(8.25)
Gui.F_Main.optARInvDate.Parent("frameAR")
Gui.F_Main.optARInvDate.TabStop(True)
Gui.F_Main.optARInvDate.TabIndex(2)
Gui.F_Main.optARDueDate.Create(Option)
Gui.F_Main.optARDueDate.Enabled(True)
Gui.F_Main.optARDueDate.Visible(True)
Gui.F_Main.optARDueDate.Zorder(0)
Gui.F_Main.optARDueDate.Size(129,24)
Gui.F_Main.optARDueDate.Position(109,17)
Gui.F_Main.optARDueDate.Caption("Use Invoice Due Date")
Gui.F_Main.optARDueDate.FontName("Tahoma")
Gui.F_Main.optARDueDate.FontSize(8.25)
Gui.F_Main.optARDueDate.Parent("frameAR")
Gui.F_Main.optARDueDate.Value(True)
Gui.F_Main.lblARSel.Create(Label,"AR Aging Date",True,70,13,0,3,2,True,0,"Tahoma",8.25,,0,0)
Gui.F_Main.lblARSel.BorderStyle(0)
Gui.F_Main.lblARSel.Parent("frameAR")
Gui.F_Main.frameAP.Create(Frame)
Gui.F_Main.frameAP.Enabled(True)
Gui.F_Main.frameAP.Visible(True)
Gui.F_Main.frameAP.Zorder(0)
Gui.F_Main.frameAP.Size(240,38)
Gui.F_Main.frameAP.Position(292,3)
Gui.F_Main.frameAP.Caption("AR Aging")
Gui.F_Main.frameAP.FontName("Tahoma")
Gui.F_Main.frameAP.FontSize(8.25)
Gui.F_Main.frameAP.BorderStyle(0)
Gui.F_Main.frameAP.Parent("tabDash",0)
Gui.F_Main.optAPInvDate.Create(Option)
Gui.F_Main.optAPInvDate.Enabled(True)
Gui.F_Main.optAPInvDate.Visible(True)
Gui.F_Main.optAPInvDate.Zorder(0)
Gui.F_Main.optAPInvDate.Size(107,24)
Gui.F_Main.optAPInvDate.Position(2,17)
Gui.F_Main.optAPInvDate.Caption("Use Invoice Date")
Gui.F_Main.optAPInvDate.FontName("Tahoma")
Gui.F_Main.optAPInvDate.FontSize(8.25)
Gui.F_Main.optAPInvDate.Parent("frameAP")
Gui.F_Main.optAPInvDate.TabStop(True)
Gui.F_Main.optAPInvDate.TabIndex(3)
Gui.F_Main.optAPDueDate.Create(Option)
Gui.F_Main.optAPDueDate.Enabled(True)
Gui.F_Main.optAPDueDate.Visible(True)
Gui.F_Main.optAPDueDate.Zorder(0)
Gui.F_Main.optAPDueDate.Size(129,24)
Gui.F_Main.optAPDueDate.Position(109,17)
Gui.F_Main.optAPDueDate.Caption("Use Invoice Due Date")
Gui.F_Main.optAPDueDate.FontName("Tahoma")
Gui.F_Main.optAPDueDate.FontSize(8.25)
Gui.F_Main.optAPDueDate.Parent("frameAP")
Gui.F_Main.optAPDueDate.Value(True)
Gui.F_Main.lblAPSel.Create(Label,"AP Aging Date",True,69,13,0,3,2,True,0,"Tahoma",8.25,,0,0)
Gui.F_Main.lblAPSel.BorderStyle(0)
Gui.F_Main.lblAPSel.Parent("frameAP")
Gui.F_Main.progressPanelCashFlow.Create(ProgressPanel,"Please Wait","Loading...",20,0,False,279,35,534,4)
Gui.F_Main.progressPanelCashFlow.Zorder(0)
Gui.F_Main.progressPanelCashFlow.FontName("Tahoma")
Gui.F_Main.progressPanelCashFlow.FontSize(12.25)
Gui.F_Main.progressPanelCashFlow.FontSizeDetail(8.25)
Gui.F_Main.progressPanelCashFlow.Anchor(13)
Gui.F_Main.progressPanelCashFlow.Parent("tabDash",0)
Gui.F_Main.splitARAP.Create(SplitContainer)
Gui.F_Main.splitARAP.Enabled(True)
Gui.F_Main.splitARAP.Visible(True)
Gui.F_Main.splitARAP.Zorder(0)
Gui.F_Main.splitARAP.Size(817,584)
Gui.F_Main.splitARAP.Position(0,41)
Gui.F_Main.splitARAP.Orientation(0)
Gui.F_Main.splitARAP.SplitterPosition(403)
Gui.F_Main.splitARAP.Collapsed(False)
Gui.F_Main.splitARAP.Parent("tabDash",0)
Gui.F_Main.splitARAP.Anchor(15)
Gui.F_Main.splitARAP.Event(DblClick,splitARAP_DblClick)
Gui.F_Main.gsgcAR.Create(GsGridControl)
Gui.F_Main.gsgcAR.Enabled(True)
Gui.F_Main.gsgcAR.Visible(True)
Gui.F_Main.gsgcAR.Zorder(0)
Gui.F_Main.gsgcAR.Size(402,542)
Gui.F_Main.gsgcAR.Position(0,30)
Gui.F_Main.gsgcAR.Parent("splitARAP",0)
Gui.F_Main.gsgcAR.Anchor(13)
Gui.F_Main.gsgcAR.Dock(0)
Gui.F_Main.gsgcAR.Event(RowCellClick,gsgcAR_RowCellClick)
Gui.F_Main.lblARAging.Create(Label,"AR Aging",True,44,13,0,5,2,True,0,"Tahoma",8.25,,0,0)
Gui.F_Main.lblARAging.BorderStyle(0)
Gui.F_Main.lblARAging.Parent("splitARAP",0)
Gui.F_Main.gsgcAP.Create(GsGridControl)
Gui.F_Main.gsgcAP.Enabled(True)
Gui.F_Main.gsgcAP.Visible(True)
Gui.F_Main.gsgcAP.Zorder(0)
Gui.F_Main.gsgcAP.Size(402,543)
Gui.F_Main.gsgcAP.Position(0,30)
Gui.F_Main.gsgcAP.Parent("splitARAP",1)
Gui.F_Main.gsgcAP.Anchor(13)
Gui.F_Main.gsgcAP.Dock(0)
Gui.F_Main.gsgcAP.Event(RowCellClick,gsgcAP_RowCellClick)
Gui.F_Main.lblAPAging.Create(Label,"AP Aging",True,43,13,0,5,2,True,0,"Tahoma",8.25,,0,0)
Gui.F_Main.lblAPAging.BorderStyle(0)
Gui.F_Main.lblAPAging.Parent("splitARAP",1)
Gui.F_Main.cmdCashRefresh.Create(Button)
Gui.F_Main.cmdCashRefresh.Enabled(True)
Gui.F_Main.cmdCashRefresh.Visible(True)
Gui.F_Main.cmdCashRefresh.Zorder(0)
Gui.F_Main.cmdCashRefresh.Size(30,30)
Gui.F_Main.cmdCashRefresh.Position(8,7)
Gui.F_Main.cmdCashRefresh.Caption("Refresh")
Gui.F_Main.cmdCashRefresh.FontName("Tahoma")
Gui.F_Main.cmdCashRefresh.FontSize(8.25)
Gui.F_Main.cmdCashRefresh.Parent("tabDash",0)
Gui.F_Main.cmdCashRefresh.Event(Click,cmdCashRefresh_Click)
Gui.F_Main.cmdCashRefresh.Dock(0)
Gui.F_Main.cmdCashRefresh.TabStop(True)
Gui.F_Main.cmdCashRefresh.TabIndex(1)
Gui.F_Main.chkParentWOs.Create(CheckBox)
Gui.F_Main.chkParentWOs.Enabled(True)
Gui.F_Main.chkParentWOs.Visible(True)
Gui.F_Main.chkParentWOs.Zorder(0)
Gui.F_Main.chkParentWOs.Size(233,20)
Gui.F_Main.chkParentWOs.Position(58,12)
Gui.F_Main.chkParentWOs.Caption("Populate with Top-Level Work Orders Only")
Gui.F_Main.chkParentWOs.FontName("Tahoma")
Gui.F_Main.chkParentWOs.FontSize(8.25)
Gui.F_Main.chkParentWOs.Parent("tabDash",3)
Gui.F_Main.chkParentWOs.Value(True)
Gui.F_Main.frameOrders.Create(Frame)
Gui.F_Main.frameOrders.Enabled(True)
Gui.F_Main.frameOrders.Visible(True)
Gui.F_Main.frameOrders.Zorder(0)
Gui.F_Main.frameOrders.Size(286,22)
Gui.F_Main.frameOrders.Position(55,12)
Gui.F_Main.frameOrders.Caption("")
Gui.F_Main.frameOrders.FontName("Tahoma")
Gui.F_Main.frameOrders.FontSize(8.25)
Gui.F_Main.frameOrders.Parent("tabDash",1)
Gui.F_Main.frameOrders.BorderStyle(0)
Gui.F_Main.optShipSched.Create(Option)
Gui.F_Main.optShipSched.Enabled(True)
Gui.F_Main.optShipSched.Visible(False)
Gui.F_Main.optShipSched.Zorder(0)
Gui.F_Main.optShipSched.Size(145,24)
Gui.F_Main.optShipSched.Position(143,0)
Gui.F_Main.optShipSched.Caption("Use Ship Schedule Dates")
Gui.F_Main.optShipSched.FontName("Tahoma")
Gui.F_Main.optShipSched.FontSize(8.25)
Gui.F_Main.optShipSched.Parent("frameOrders")
Gui.F_Main.optShipSched.Value(True)
Gui.F_Main.optItemProm.Create(Option)
Gui.F_Main.optItemProm.Enabled(True)
Gui.F_Main.optItemProm.Visible(False)
Gui.F_Main.optItemProm.Zorder(0)
Gui.F_Main.optItemProm.Size(140,24)
Gui.F_Main.optItemProm.Position(0,0)
Gui.F_Main.optItemProm.Caption("Use Item Promise Date")
Gui.F_Main.optItemProm.FontName("Tahoma")
Gui.F_Main.optItemProm.FontSize(8.25)
Gui.F_Main.optItemProm.Parent("frameOrders")
Gui.F_Main.optItemProm.TabStop(True)
Gui.F_Main.optItemProm.TabIndex(2)
Gui.F_Main.chkOrderCost.Create(CheckBox)
Gui.F_Main.chkOrderCost.Enabled(True)
Gui.F_Main.chkOrderCost.Visible(False)
Gui.F_Main.chkOrderCost.Zorder(0)
Gui.F_Main.chkOrderCost.Size(160,20)
Gui.F_Main.chkOrderCost.Position(354,14)
Gui.F_Main.chkOrderCost.Caption("Include Costs")
Gui.F_Main.chkOrderCost.FontName("Tahoma")
Gui.F_Main.chkOrderCost.FontSize(8.25)
Gui.F_Main.chkOrderCost.Parent("tabDash",1)
Gui.F_Main.chkOrderCost.TabStop(True)
Gui.F_Main.chkOrderCost.TabIndex(3)
Gui.F_Main.gsgcOrders.Create(GsGridControl)
Gui.F_Main.gsgcOrders.Enabled(True)
Gui.F_Main.gsgcOrders.Visible(True)
Gui.F_Main.gsgcOrders.Zorder(0)
Gui.F_Main.gsgcOrders.Size(1020,583)
Gui.F_Main.gsgcOrders.Position(0,41)
Gui.F_Main.gsgcOrders.Parent("tabDash",1)
Gui.F_Main.gsgcOrders.Anchor(15)
Gui.F_Main.gsgcOrders.Event(RowCellClick,gsgcOrders_RowCellClick)
Gui.F_Main.cmdOrdersRefresh.Create(Button)
Gui.F_Main.cmdOrdersRefresh.Enabled(True)
Gui.F_Main.cmdOrdersRefresh.Visible(True)
Gui.F_Main.cmdOrdersRefresh.Zorder(0)
Gui.F_Main.cmdOrdersRefresh.Size(30,30)
Gui.F_Main.cmdOrdersRefresh.Position(8,7)
Gui.F_Main.cmdOrdersRefresh.TabStop(True)
Gui.F_Main.cmdOrdersRefresh.TabIndex(1)
Gui.F_Main.cmdOrdersRefresh.Caption("Refresh")
Gui.F_Main.cmdOrdersRefresh.FontName("Tahoma")
Gui.F_Main.cmdOrdersRefresh.FontSize(8.25)
Gui.F_Main.cmdOrdersRefresh.Parent("tabDash",1)
Gui.F_Main.cmdOrdersRefresh.Event(Click,cmdOrdersRefresh_Click)
Gui.F_Main.dtpShipBeg.Create(DatePicker)
Gui.F_Main.dtpShipBeg.Enabled(True)
Gui.F_Main.dtpShipBeg.Visible(True)
Gui.F_Main.dtpShipBeg.Zorder(0)
Gui.F_Main.dtpShipBeg.Size(100,20)
Gui.F_Main.dtpShipBeg.Position(8,23)
Gui.F_Main.dtpShipBeg.CheckBox(False)
Gui.F_Main.dtpShipBeg.FontName("Tahoma")
Gui.F_Main.dtpShipBeg.FontSize(8.25)
Gui.F_Main.dtpShipBeg.Event(Change,dtpShipBeg_Change)
Gui.F_Main.dtpShipBeg.Parent("tabDash",2)
Gui.F_Main.dtpShipBeg.Dock(0)
Gui.F_Main.dtpShipBeg.TabStop(True)
Gui.F_Main.dtpShipBeg.TabIndex(1)
Gui.F_Main.lblThru.Create(Label,"thru",True,20,13,0,111,26,True,0,"Tahoma",8.25,,0,0)
Gui.F_Main.lblThru.BorderStyle(0)
Gui.F_Main.lblThru.Parent("tabDash",2)
Gui.F_Main.lblEndDate.Create(Label,"End Date",True,44,13,0,137,7,True,0,"Tahoma",8.25,,0,0)
Gui.F_Main.lblEndDate.BorderStyle(0)
Gui.F_Main.lblEndDate.Parent("tabDash",2)
Gui.F_Main.dtpShipEnd.Create(DatePicker)
Gui.F_Main.dtpShipEnd.Enabled(True)
Gui.F_Main.dtpShipEnd.Visible(True)
Gui.F_Main.dtpShipEnd.Zorder(0)
Gui.F_Main.dtpShipEnd.Size(100,20)
Gui.F_Main.dtpShipEnd.Position(134,23)
Gui.F_Main.dtpShipEnd.CheckBox(False)
Gui.F_Main.dtpShipEnd.FontName("Tahoma")
Gui.F_Main.dtpShipEnd.FontSize(8.25)
Gui.F_Main.dtpShipEnd.Event(Change,dtpShipEnd_Change)
Gui.F_Main.dtpShipEnd.Parent("tabDash",2)
Gui.F_Main.dtpShipEnd.TabStop(True)
Gui.F_Main.dtpShipEnd.TabIndex(2)
Gui.F_Main.cmdShipRefresh.Create(Button)
Gui.F_Main.cmdShipRefresh.Enabled(True)
Gui.F_Main.cmdShipRefresh.Visible(True)
Gui.F_Main.cmdShipRefresh.Zorder(0)
Gui.F_Main.cmdShipRefresh.Size(30,30)
Gui.F_Main.cmdShipRefresh.Position(242,18)
Gui.F_Main.cmdShipRefresh.Caption("Refresh")
Gui.F_Main.cmdShipRefresh.FontName("Tahoma")
Gui.F_Main.cmdShipRefresh.FontSize(8.25)
Gui.F_Main.cmdShipRefresh.Event(Click,cmdShipRefresh_Click)
Gui.F_Main.cmdShipRefresh.Parent("tabDash",2)
Gui.F_Main.cmdShipRefresh.TabStop(True)
Gui.F_Main.cmdShipRefresh.TabIndex(3)
Gui.F_Main.gsgcShip.Create(GsGridControl)
Gui.F_Main.gsgcShip.Enabled(True)
Gui.F_Main.gsgcShip.Visible(True)
Gui.F_Main.gsgcShip.Zorder(0)
Gui.F_Main.gsgcShip.Size(1020,572)
Gui.F_Main.gsgcShip.Position(0,52)
Gui.F_Main.gsgcShip.Event(RowCellClick,gsgcShip_RowCellClick)
Gui.F_Main.gsgcShip.Parent("tabDash",2)
Gui.F_Main.gsgcShip.Anchor(15)
Gui.F_Main.gsgcShip.Dock(0)
Gui.F_Main.lblBegDate.Create(Label,"Start Date",True,50,13,0,11,7,True,0,"Tahoma",8.25,,0,0)
Gui.F_Main.lblBegDate.BorderStyle(0)
Gui.F_Main.lblBegDate.Parent("tabDash",2)
Gui.F_Main.gsgcJob.Create(GsGridControl)
Gui.F_Main.gsgcJob.Enabled(True)
Gui.F_Main.gsgcJob.Visible(True)
Gui.F_Main.gsgcJob.Zorder(0)
Gui.F_Main.gsgcJob.Size(1020,583)
Gui.F_Main.gsgcJob.Position(0,41)
Gui.F_Main.gsgcJob.Parent("tabDash",3)
Gui.F_Main.gsgcJob.Anchor(15)
Gui.F_Main.gsgcJob.Event(RowCellClick,gsgcJob_RowCellClick)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Program.External.Include.Library("GCG_5784_Try_Catch.lib")
Program.External.Include.Library("7070.lib")
Program.External.Include.Library("100000.lib")
Program.External.Include.Library("175200.lib")
Program.External.Include.Library("200000.lib")
Program.External.Include.Library("300011.lib")
Program.External.Include.Library("450000.lib")
V.Global.bUseRev.Declare
V.Global.bShipSchedule.Declare
V.Global.sCashAccounts.Declare
V.Global.sLate.Declare(String,"Late")
V.Global.sCurrent.Declare(String,"Current")
V.Global.s0to30.Declare(String,"Zero")
V.Global.s31to60.Declare(String,"Thirty")
V.Global.s61to90.Declare(String,"Sixty")
V.Global.s91andUp.Declare(String,"Ninety")
V.Global.sNotAged.Declare(String,"Not Aged")
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Author: BixRB
'Date: 9 Dec 2019
'GCG_5784_Executive_Dashboard.g2u
'LANZEN FABRICATING, INC.
'Dashboard for executives to see overviews of shipping, shop floor control, and aging financial data
'Key Subs: cmdShipRefresh_Click - refresh Shipping Analysis dashboard
'		   cmdJobsRefresh_Click - refresh Open Jobs by Customer dashboard
'		   cmdCashRefresh_Click - refresh AR aging, AP aging, and Cash Accounts Summary dashboard
F.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout

'WARNING
' DO NOT OPEN THE FORM DESIGNER AND SAVE THE PROGRAM, THIS WILL MESS UP THE TAB INDEXING BECAUSE TAB INDEXING IS HORRIBLE IN GAB
'
' IF YOU BREAK IT, YOU WILL HAVE TO FIX IT - Bix (Go to Line 1 for instructions)
'WARNING

'-------------------------------------
F.Global.General.ReadOption("070008",0,False,"0000",V.Global.bUseRev)
' Returns True/False for Using Rev/Not Using Rev respectively

'-------------------------------------
F.Global.General.ReadOption("400718",0,False,"0000",V.Global.bShipSchedule)
F.Intrinsic.Control.If(V.Global.bShipSchedule.Not)
	'Unenable ship schedule option
	Gui.F_Main.optItemProm.Enabled(False)
	Gui.F_Main.optShipSched.Enabled(False)
F.Intrinsic.Control.EndIf
' Returns True/False for Ship Schedule File being turned on

'-------------------------------------
Gui.F_Main..ContextMenuCreate("ctxShip")
Gui.F_Main..ContextMenuAddItem("ctxShip","Export",0,"Export")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxShip","Export",ExportShipping)
Gui.F_Main.gsgcShip.ContextMenuAttach("ctxShip")

Gui.F_Main..ContextMenuCreate("ctxJobs")
Gui.F_Main..ContextMenuAddItem("ctxJobs","Export",0,"Export Customers Only")
Gui.F_Main..ContextMenuAddItem("ctxJobs","ExportDetails",0,"Export Details")
Gui.F_Main..ContextMenuAddItem("ctxJobs","ExpandRows",0,"Expand All Rows for Work Order Review")
Gui.F_Main..ContextMenuAddItem("ctxJobs","CollapseRows",0,"Collapse All Rows for Work Order Review")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxJobs","Export",ExportJob)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxJobs","ExportDetails",ExportJobDetails)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxJobs","ExpandRows",ExpandJobRows)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxJobs","CollapseRows",CollapseJobRows)
Gui.F_Main.gsgcJob.ContextMenuAttach("ctxJobs")

Gui.F_Main..ContextMenuCreate("ctxOrders")
Gui.F_Main..ContextMenuAddItem("ctxOrders","Export",0,"Export Customers Only")
Gui.F_Main..ContextMenuAddItem("ctxOrders","ExportDetails",0,"Export Details")
Gui.F_Main..ContextMenuAddItem("ctxOrders","ExpandRows",0,"Expand All Rows for Current Back Log Valuation")
Gui.F_Main..ContextMenuAddItem("ctxOrders","CollapseRows",0,"Collapse All Rows for Current Back Log Valuation")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxOrders","Export",ExportOrder)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxOrders","ExportDetails",ExportOrderDetails)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxOrders","ExpandRows",ExpandOrderRows)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxOrders","CollapseRows",CollapseOrderRows)
Gui.F_Main.gsgcOrders.ContextMenuAttach("ctxOrders")

Gui.F_Main..ContextMenuCreate("ctxAR")
Gui.F_Main..ContextMenuAddItem("ctxAR","Export",0,"Export Customers Only")
Gui.F_Main..ContextMenuAddItem("ctxAR","ExportDetails",0,"Export Details")
Gui.F_Main..ContextMenuAddItem("ctxAR","ExpandRows",0,"Expand All Rows for AR Aging")
Gui.F_Main..ContextMenuAddItem("ctxAR","CollapseRows",0,"Collapse All Rows for AR Aging")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAR","Export",ExportAR)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAR","ExportDetails",ExportARDetails)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAR","ExpandRows",ExpandARRows)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAR","CollapseRows",CollapseARRows)
Gui.F_Main.gsgcAR.ContextMenuAttach("ctxAR")

Gui.F_Main..ContextMenuCreate("ctxAP")
Gui.F_Main..ContextMenuAddItem("ctxAP","Export",0,"Export Vendors Only")
Gui.F_Main..ContextMenuAddItem("ctxAP","ExportDetails",0,"Export Details")
Gui.F_Main..ContextMenuAddItem("ctxAP","ExpandRows",0,"Expand All Rows for AP Aging")
Gui.F_Main..ContextMenuAddItem("ctxAP","CollapseRows",0,"Collapse All Rows for AP Aging")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAP","Export",ExportAP)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAP","ExportDetails",ExportAPDetails)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAP","ExpandRows",ExpandAPRows)
Gui.F_Main..ContextMenuSetItemEventHandler("ctxAP","CollapseRows",CollapseAPRows)
Gui.F_Main.gsgcAP.ContextMenuAttach("ctxAP")
' Builds context menus for dashboards

'-------------------------------------
Gui.F_Main..ContextMenuCreate("ctxCashDebug")
Gui.F_Main..ContextMenuAddItem("ctxCashDebug","Debug",0,"Run in Debug Mode")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxCashDebug","Debug",cmdCashRefresh_Debug)
Gui.F_Main.cmdCashRefresh.ContextMenuAttach("ctxCashDebug")

Gui.F_Main..ContextMenuCreate("ctxOrdersDebug")
Gui.F_Main..ContextMenuAddItem("ctxOrdersDebug","Debug",0,"Run in Debug Mode")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxOrdersDebug","Debug",cmdOrdersRefresh_Debug)
Gui.F_Main.cmdOrdersRefresh.ContextMenuAttach("ctxOrdersDebug")

Gui.F_Main..ContextMenuCreate("ctxShipDebug")
Gui.F_Main..ContextMenuAddItem("ctxShipDebug","Debug",0,"Run in Debug Mode")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxShipDebug","Debug",cmdShipRefresh_Debug)
Gui.F_Main.cmdShipRefresh.ContextMenuAttach("ctxShipDebug")

Gui.F_Main..ContextMenuCreate("ctxJobDebug")
Gui.F_Main..ContextMenuAddItem("ctxJobDebug","Debug",0,"Run in Debug Mode")
Gui.F_Main..ContextMenuSetItemEventHandler("ctxJobDebug","Debug",cmdJobRefresh_Debug)
Gui.F_Main.cmdJobRefresh.ContextMenuAttach("ctxJobDebug")
'Build debug context menus for refresh

'-------------------------------------
F.ODBC.Connection!con.OpenCompanyConnection
F.ODBC.Connection!con.ExecuteAndReturn("select GL_CASH_ACCT from V_CASH_ACCOUNT;",V.Global.sCashAccounts)
F.ODBC.Connection!con.Close
F.Intrinsic.String.Split(V.Global.sCashAccounts,"#$#",V.Global.sCashAccounts)
' Populates list of cash accounts for future use

Gui.F_Main..Show

'19.1 bug that prevents anchors from working on tabs that have not been made visible
Gui.F_Main.tabDash.SetTab(3)
Gui.F_Main.tabDash.SetTab(2)
Gui.F_Main.tabDash.SetTab(1)
Gui.F_Main.tabDash.SetTab(0)
Program.Sub.Main.End

Program.Sub.F_Main_UnLoad.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtShip.Exists)
	F.Intrinsic.Control.CallSub(SerializeShipping)
	F.Data.DataTable.Close("dtShip")
F.Intrinsic.Control.EndIf
' Serialize and close shipping dashboard

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCustomersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeJobs)
	F.Data.DataTable.Close("dtCustomersAg$dtJobs")
	F.Data.DataTable.Close("dtCustomersAg")
F.Intrinsic.Control.EndIf
' Serialize and close job dashboard

F.Intrinsic.Control.If(V.DataTable.dtOrdersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeOrders)
	F.Data.DataTable.Close("dtOrdersAg$dtOrders")
	F.Data.DataTable.Close("dtOrdersAg")
F.Intrinsic.Control.EndIf

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCashAcctSumm.Exists)
	F.Intrinsic.Control.CallSub(SerializeCashAccounts)
	F.Data.DataTable.Close("dtCashAcctSumm")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtARAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAR)
	F.Data.DataTable.Close("dtARAgingAg$dtARAging")
	F.Data.DataTable.Close("dtARAgingAg")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtAPAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAP)
	F.Data.DataTable.Close("dtAPAgingAg$dtAPAging")
	F.Data.DataTable.Close("dtAPAgingAg")
F.Intrinsic.Control.EndIf
' Serialize and close financial dashboards

'-------------------------------------
F.Intrinsic.Control.End
' Kill program

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.F_Main_UnLoad.End

Program.Sub.F_Main_RefreshClick.Start
V.Local.iRet.Declare
F.Intrinsic.Control.Try

Gui.F_Main..Enabled(False)

'Notify user that this may take awhile
F.Intrinsic.UI.Msgbox("This process refreshes all dashboards (including the Cash Flow Summary dashboards), this process will take awhile on larger databases. Would you like to continue?","Warning!",4,V.Local.iRet)
F.Intrinsic.Control.If(V.Local.iRet,!=,6)
	'No or Exit
	Gui.F_Main..Enabled(True)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

Gui.F_Main..SetFocus

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtShip.Exists)
	F.Intrinsic.Control.CallSub(SerializeShipping)
	F.Data.DataTable.Close("dtShip")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtCustomersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeJobs)
	F.Data.DataTable.Close("dtCustomersAg$dtJobs")
	F.Data.DataTable.Close("dtCustomersAg")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtCashAcctSumm.Exists)
	F.Intrinsic.Control.CallSub(SerializeCashAccounts)
	F.Data.DataTable.Close("dtCashAcctSumm")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtARAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAR)
	F.Data.DataTable.Close("dtARAgingAg$dtARAging")
	F.Data.DataTable.Close("dtARAgingAg")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtAPAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAP)
	F.Data.DataTable.Close("dtAPAgingAg$dtAPAging")
	F.Data.DataTable.Close("dtAPAgingAg")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtOrdersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeOrders)
	F.Data.DataTable.Close("dtOrdersAg$dtOrders")
	F.Data.DataTable.Close("dtOrdersAg")
F.Intrinsic.Control.EndIf
' Serialze and close dashboards

Gui.F_Main.tabDash.SetTab(0)
Gui.F_Main.progressPanelCashFlow.Caption("Please wait")
Gui.F_Main.progressPanelCashFlow.Detail("Getting shipping data")
Gui.F_Main.progressPanelCashFlow.Visible(True)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetShippingDataTable,"StartDate",V.Screen.F_Main!dtpShipBeg.Value,"EndDate",V.Screen.F_Main!dtpShipEnd.Value,"Debug",False)
Gui.F_Main.progressPanelCashFlow.Detail("Getting open jobs data")
F.Intrinsic.Control.CallSub(GetOpenJobDataTable,"Debug",False)
Gui.F_Main.progressPanelCashFlow.Detail("Getting cash accounts data")
F.Intrinsic.Control.CallSub(GetCashAccountsDataTable,"Debug",False)
Gui.F_Main.progressPanelCashFlow.Detail("Getting AR aging data")
F.Intrinsic.Control.CallSub(GetARAgingDataTable,"Debug",False)
Gui.F_Main.progressPanelCashFlow.Detail("Getting AP aging data")
F.Intrinsic.Control.CallSub(GetAPAgingDataTable,"Debug",False)
Gui.F_Main.progressPanelCashFlow.Detail("Getting open orders data")
F.Intrinsic.Control.CallSub(GetOrdersDataTable,"Debug",False)
' Build datasets for dashboards

Gui.F_Main.progressPanelCashFlow.Detail("Setting up dashboard views")
'-------------------------------------
F.Intrinsic.Control.CallSub(SetupShippingGrid)
F.Intrinsic.Control.CallSub(DeserializeShipping)
F.Intrinsic.Control.CallSub(SetupJobsGrid)
F.Intrinsic.Control.CallSub(DeserializeJobs)
F.Intrinsic.Control.If(V.DataTable.dtCashAcctSumm.Exists)
	F.Intrinsic.Control.CallSub(SetupCashAccountsGrid)
	F.Intrinsic.Control.CallSub(DeserializeCashAccounts)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(SetupARGrid)
F.Intrinsic.Control.CallSub(DeserializeAR)
F.Intrinsic.Control.CallSub(SetupAPGrid)
F.Intrinsic.Control.CallSub(DeserializeAP)
F.Intrinsic.Control.CallSub(SetupOrdersGrid)
F.Intrinsic.Control.CallSub(DeserializeOrders)
' initialize dashboards and format them before serializing each one

Gui.F_Main.progressPanelCashFlow.Visible(False)

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.F_Main_RefreshClick.End

Program.Sub.dtpShipEnd_Change.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.Screen.F_Main!dtpShipEnd.Value,<,V.Screen.F_Main!dtpShipBeg.Value) 
	Gui.F_Main.dtpShipEnd.Value(V.Screen.F_Main!dtpShipBeg.Value)
F.Intrinsic.Control.EndIf
' Maintain date consistency (Beginning before end)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.dtpShipEnd_Change.End

Program.Sub.dtpShipBeg_Change.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.Screen.F_Main!dtpShipBeg.Value,>,V.Screen.F_Main!dtpShipEnd.Value)
	Gui.F_Main.dtpShipBeg.Value(V.Screen.F_Main!dtpShipEnd.Value)
F.Intrinsic.Control.EndIf
' Maintain date consistency (Beginning before end)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.dtpShipBeg_Change.End

Program.Sub.cmdShipRefresh_Click.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtShip.Exists)
	F.Intrinsic.Control.CallSub(SerializeShipping)
	F.Data.DataTable.Close("dtShip")
F.Intrinsic.Control.EndIf
' Serialize and close shipping dashboard

Gui.F_Main..Enabled(False)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetShippingDataTable,"StartDate",V.Screen.F_Main!dtpShipBeg.Value,"EndDate",V.Screen.F_Main!dtpShipEnd.Value,"Debug",False)
' Build dtShipAg and dtShipAg$dtShipList

'-------------------------------------
F.Intrinsic.Control.CallSub(SetupShippingGrid)
F.Intrinsic.Control.CallSub(DeserializeShipping)
' initialize dashboard and format before deserializing

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdShipRefresh_Click.End

Program.Sub.GetShippingDataTable.Start
'Passed: V.Args.StartDate, V.Args.EndDate
V.Local.sShipSQL.Declare
V.Local.sHistSQL.Declare
V.Local.sFields.Declare
V.Local.sGroupBy.Declare
V.Local.sOrderBy.Declare
V.Local.sParent.Declare
F.Intrinsic.Control.Try

'-------------------------------------
V.Local.sShipSQL.Set("select rtrim(INVOICE) as INVOICE, ORDER_NO, ORDER_SUFFIX, left(ORDER_REC, 3) as ORDER_LINE, rtrim(CUSTOMER) as CUSTOMER, QTY_SHIPPED, rtrim(PART) as PART, ")
V.Local.sHistSQL.Set("select rtrim(INVOICE) as INVOICE, ORDER_NO, ORDER_SUFFIX, left(ORDER_LINE, 3) as ORDER_LINE, rtrim(CUSTOMER) as CUSTOMER, QTY_SHIPPED, rtrim(PART) as PART, ")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	F.Intrinsic.String.Build("{0}rtrim(left(PART, 17)) as PART_NUM, rtrim(right(PART, 3)) as REV, ",V.Local.sShipSQL,V.Local.sShipSQL)
	F.Intrinsic.String.Build("{0}rtrim(left(PART, 17)) as PART_NUM, rtrim(right(PART, 3)) as REV, ",V.Local.sHistSQL,V.Local.sHistSQL)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}LOCATION as LOC, DATE_ORDER, DATE_ITEM_PROMISE as DATE_DUE, DATE_SHIP, cast(DATEDIFF(day, DATE_ORDER, DATE_SHIP) as int) as HOUSE_DAYS, cast(DATEDIFF(day, DATE_SHIP, DATE_ITEM_PROMISE) as int) as EARLY_LATE_DAYS, EXTENSION from V_SHIPMENT_LINES where ORDER_REC <> '8000' and DATE_SHIP between '{1}' and '{2}';",V.Local.sShipSQL,V.Args.StartDate.PervasiveDate,V.Args.EndDate.PervasiveDate,V.Local.sShipSQL)
F.Intrinsic.String.Build("{0}LOCATION as LOC, DATE_ORDER, DATE_DUE, DATE_SHIPPED as DATE_SHIP, cast(DATEDIFF(day, DATE_ORDER, DATE_SHIPPED) as int) as HOUSE_DAYS, cast(DATEDIFF(day, DATE_SHIPPED, DATE_DUE) as int) as EARLY_LATE_DAYS, EXTENSION from V_ORDER_HIST_LINE where ORDER_LINE <> '8000' and DATE_SHIPPED between '{1}' and '{2}';",V.Local.sHistSQL,V.Args.StartDate.PervasiveDate,V.Args.EndDate.PervasiveDate,V.Local.sHistSQL)
' Build initial strings using dates on screen (Beginning and End dates)

'-------------------------------------
F.Intrinsic.Control.If(V.Args.Debug)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf
F.ODBC.Connection!con.OpenCompanyConnection
F.Data.DataTable.CreateFromSQL("dtOrdersShipped","con",V.Local.sShipSQL,False)
F.Data.DataTable.CreateFromSQL("dtOrderHistory","con",V.Local.sHistSQL,False)
F.Data.DataTable.CreateFromSQL("dtParts","con","select rtrim(PART) as PART, LOCATION as LOC, rtrim(DESCRIPTION) as DESCR, PRODUCT_LINE from V_INVENTORY_ALL;",False)
F.Data.DataTable.CreateFromSQL("dtCustomers","con","select rtrim(CUSTOMER) as CUSTOMER, rtrim(NAME_CUSTOMER) as CUST_NAME from V_CUSTOMER_MASTER;",False)
F.ODBC.Connection!con.Close
' Create datasets from built sql

'-------------------------------------
F.Data.DataTable.Merge("dtOrderHistory","dtOrdersShipped",True,2)
F.Data.DataTable.Close("dtOrderHistory")
' Combine orders from SHIPMENT_LINES and ORDER_HIST_LINE into one table

'-------------------------------------
V.Local.sFields.Set("SHIP.INVOICE*!*SHIP.ORDER_NO*!*SHIP.ORDER_SUFFIX*!*SHIP.ORDER_LINE*!*SHIP.CUSTOMER*!*CUST.CUST_NAME*!*SHIP.QTY_SHIPPED*!*SHIP.EXTENSION*!*")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	F.Intrinsic.String.Build("{0}SHIP.PART_NUM*!*SHIP.REV*!*",V.Local.sFields,V.Local.sFields)
F.Intrinsic.Control.Else
	'Rev is not in use
	F.Intrinsic.String.Build("{0}SHIP.PART*!*",V.Local.sFields,V.Local.sFields)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}INVEN.DESCR*!*INVEN.PRODUCT_LINE*!*SHIP.LOC*!*SHIP.DATE_ORDER*!*SHIP.DATE_DUE*!*SHIP.DATE_SHIP*!*SHIP.HOUSE_DAYS*!*SHIP.EARLY_LATE_DAYS",V.Local.sFields,V.Local.sFields)
F.Data.Linq.Join("LeftJoin","DataTable","dtOrdersShipped*!*SHIP","DataTable","dtParts*!*INVEN","SHIP.PART = INVEN.PART and SHIP.LOC = INVEN.LOC","DataTable","dtCustomers*!*CUST","SHIP.CUSTOMER = CUST.CUSTOMER",V.Local.sFields,,,"SHIP.INVOICE asc","dtShip",True)
F.Data.DataTable.Close("dtOrdersShipped")
F.Data.DataTable.Close("dtParts")
F.Data.DataTable.Close("dtCustomers")
' Build field list based on Rev option and join together Orders data, Inventory data, and Customer data

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetShippingDataTable.End

Program.Sub.SetupShippingGrid.Start
F.Intrinsic.Control.Try

'-------------------------------------
Gui.F_Main.gsgcShip.AddGridviewFromDatatable("gvShip","dtShip")
' add table to grid view

'-------------------------------------
Gui.F_Main.gsgcShip.SetGridviewProperty("gvShip","Editable",False)
Gui.F_Main.gsgcShip.SetGridviewProperty("gvShip","ReadOnly",True)
Gui.F_Main.gsgcShip.SetGridviewProperty("gvShip","OptionsViewColumnAutoWidth",False)
' set basic gridview properties to view

'-------------------------------------
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","INVOICE","Caption","Invoice")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART_NUM","Caption","Part Number*")
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","REV","Caption","Rev*")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART","Caption","Part Number*")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","LOC","Caption","Loc")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DESCR","Caption","Description")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_NO","Caption","Order No.*")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_SUFFIX","Caption","Order Suffix")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_LINE","Caption","Order Line")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUSTOMER","Caption","Cust No.*")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUST_NAME","Caption","Customer")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","QTY_SHIPPED","Caption","Shipped Qty")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EXTENSION","Caption","Gross Revenue")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PRODUCT_LINE","Caption","PL")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_ORDER","Caption","Order Date")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_DUE","Caption","Due Date")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_SHIP","Caption","Ship Date")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","HOUSE_DAYS","Caption","Days in House")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EARLY_LATE_DAYS","Caption","Days Early/Late")
' setup captions on view

'-------------------------------------
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","INVOICE","Width",75)
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART_NUM","Width",115)
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","REV","Width",55)
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART","Width",135)
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","LOC","Width",50)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DESCR","Width",150)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_NO","Width",85)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_SUFFIX","Width",95)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_LINE","Width",85)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUSTOMER","Width",75)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUST_NAME","Width",150)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","QTY_SHIPPED","Width",95)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EXTENSION","Width",125)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PRODUCT_LINE","Width",45)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_ORDER","Width",90)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_DUE","Width",90)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_SHIP","Width",90)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","HOUSE_DAYS","Width",110)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EARLY_LATE_DAYS","Width",120)
' set widths on view

'-------------------------------------
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","INVOICE","HeaderHAlignment","Center")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART_NUM","HeaderHAlignment","Center")
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","REV","HeaderHAlignment","Center")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART","HeaderHAlignment","Center")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","LOC","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DESCR","HeaderHAlignment","Near")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_NO","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_SUFFIX","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_LINE","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUSTOMER","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUST_NAME","HeaderHAlignment","Near")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","QTY_SHIPPED","HeaderHAlignment","Far")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EXTENSION","HeaderHAlignment","Far")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PRODUCT_LINE","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_ORDER","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_DUE","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_SHIP","HeaderHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","HOUSE_DAYS","HeaderHAlignment","Far")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EARLY_LATE_DAYS","HeaderHAlignment","Far")
' set header alignments on view

'-------------------------------------
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","INVOICE","CellHAlignment","Center")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART_NUM","CellHAlignment","Center")
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","REV","CellHAlignment","Center")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART","CellHAlignment","Center")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","LOC","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DESCR","CellHAlignment","Near")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_NO","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_SUFFIX","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_LINE","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUSTOMER","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUST_NAME","CellHAlignment","Near")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","QTY_SHIPPED","CellHAlignment","Far")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EXTENSION","CellHAlignment","Far")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PRODUCT_LINE","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_ORDER","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_DUE","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_SHIP","CellHAlignment","Center")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","HOUSE_DAYS","CellHAlignment","Far")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EARLY_LATE_DAYS","CellHAlignment","Far")
' set cell alignments on view

'-------------------------------------
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_ORDER","DisplayCustomDateTime","d")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_DUE","DisplayCustomDateTime","d")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","DATE_SHIP","DisplayCustomDateTime","d")
' set date display format to use MM/DD/YYYY (or the default of the workstation)

'-------------------------------------
'Float
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","QTY_SHIPPED","EditMaskType","Numeric")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","QTY_SHIPPED","EditMask","#,###,##0.0000")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","QTY_SHIPPED","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EXTENSION","EditMaskType","Numeric")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EXTENSION","EditMask","$ #,###,##0.00")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EXTENSION","EditMaskAsDisplayFormat",True)
'Integer
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","HOUSE_DAYS","EditMaskType","Numeric")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","HOUSE_DAYS","EditMask","#,###,##0")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","HOUSE_DAYS","EditMaskAsDisplayFormat",True)
'Integer
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EARLY_LATE_DAYS","EditMaskType","Numeric")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EARLY_LATE_DAYS","EditMask","#,###,##0")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","EARLY_LATE_DAYS","EditMaskAsDisplayFormat",True)
' set number formats for numeric fields

'-------------------------------------
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART_NUM","IsHyperlink",True)
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART_NUM","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART_NUM","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","REV","IsHyperlink",True)
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","REV","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","REV","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART","IsHyperlink",True)
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","PART","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_NO","IsHyperlink",True)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_NO","ToolTip","*Double-click to open")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","ORDER_NO","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUSTOMER","IsHyperlink",True)
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUSTOMER","ToolTip","*Double-click to open")
Gui.F_Main.gsgcShip.SetColumnProperty("gvShip","CUSTOMER","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
' set cell font color for clickable fields

'-------------------------------------
Gui.F_Main.gsgcShip.AddStyleFormatCondition("gvShip","EARLY_LATE_DAYS","DAYS_LATE","Less",0)
Gui.F_Main.gsgcShip.AddStyleFormatCondition("gvShip","EARLY_LATE_DAYS","DAYS_EARLY","Greater",0)
Gui.F_Main.gsgcShip.SetStyleFormatConditionProperty("gvShip","EARLY_LATE_DAYS","DAYS_LATE","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcShip.SetStyleFormatConditionProperty("gvShip","EARLY_LATE_DAYS","DAYS_EARLY","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
'Gui.F_Main.gsgcShip.AddStyleFormatCondition("gvShip","INVOICE","NO_INVOICE","Equal","")
'Gui.F_Main.gsgcShip.SetStyleFormatConditionProperty("gvShip","INVOICE","NO_INVOICE","BackColor",V.Enum.ThemeColors!ColorBlack)
' add color format conditions for orders that are late or early

'-------------------------------------
Gui.F_Main.gsgcShip.AddSummaryItem("gvShip","EXTENSION","TotalGR","Sum","Total: ","","$ #,###,##0.00")
' add sum for gross revenue at bottom of dashboard

'-------------------------------------
Gui.F_Main.gsgcShip.MainView("gvShip")
' activate dashboard

Gui.F_Main.gsgcShip.TabStop(True)
Gui.F_Main.gsgcShip.TabIndex(4)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SetupShippingGrid.End

Program.Sub.SerializeShipping.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVSHIP
Gui.F_Main.gsgcShip.Serialize("gvShip",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVSHIP",5784,8000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SerializeShipping.End

Program.Sub.DeserializeShipping.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVSHIP
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVSHIP",5784,8000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcShip.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.DeserializeShipping.End

Program.Sub.gsgcShip_RowCellClick.Start
V.Local.sDataTable.Declare
V.Local.sPart.Declare
V.Local.sSQL.Declare
V.Local.sPath.Declare
V.Local.bExists.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.Args.Clicks,!=,2,"or",V.Args.Button.UCase,!=,"LEFT") 
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
' verify clicking conditions

'-------------------------------------
Gui.F_Main.gsgcShip.GetFocusedGridview(V.Local.sDataTable)
' get data table name

'-------------------------------------
F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
	F.Intrinsic.Control.CaseAny("PART_NUM","REV")
		'Open Supply and Demand Screen
		F.Intrinsic.String.GSSPartString(V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).PART_NUM!FieldVal,V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).REV!FieldVal,V.Local.sPart)
		F.Intrinsic.String.Build("{0}bin\SupplyAndDemand.exe",V.Caller.LocalGSSTempDir,V.Local.sPath)
		F.Intrinsic.File.Exists(V.Local.sPath,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBER",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).PART_NUM!FieldVal)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBERREVISION",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).REV!FieldVal)
			F.Intrinsic.Task.SetEnvironmentVariable("LOCATIONCODE",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Task.LaunchAsync(V.Local.sPath,1,V.Local.sPath)
		F.Intrinsic.Control.Else
			F.Data.DataTable.AddRow("300011","Part",V.Local.sPart,"Location",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal,"Switch","")
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(300011Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("PART")
		'Open Supply and Demand Screen
		F.Intrinsic.String.Build("{0}bin\SupplyAndDemand.exe",V.Caller.LocalGSSTempDir,V.Local.sPath)
		F.Intrinsic.File.Exists(V.Local.sPath,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBER",V.Args.CellValue)
			F.Intrinsic.Task.SetEnvironmentVariable("LOCATIONCODE",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Task.LaunchAsync(V.Local.sPath,1,V.Local.sPath)
		F.Intrinsic.Control.Else
			F.Data.DataTable.AddRow("300011","Part",V.Args.CellValue,"Location",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal,"Switch","")
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(300011Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("ORDER_NO")
		'-------------------------------------
		F.Intrinsic.String.Build("select 1 from V_ORDER_HEADER where ORDER_NO = '{0}';",V.Args.CellValue,V.Local.sSQL)
		F.ODBC.Connection!con.OpenCompanyConnection
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
		F.ODBC.Connection!con.Close
		' check if order is active or in history
		
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
			'Open Order History Screen
			F.Data.DataTable.AddRow("7070","Order",V.Args.CellValue,"Customer",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).CUSTOMER!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(7070Sync)
		F.Intrinsic.Control.Else
			'Open Order Header Screen
			F.Data.DataTable.AddRow("200000","OrdNum",V.Args.CellValue,"Mode","V","CustNum",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).CUSTOMER!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(200000Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("CUSTOMER")
		'Open Customer Master Screen
		F.Data.DataTable.AddRow("100000","Mode","V","ProspectFlag","","Customer",V.Args.CellValue)
		Gui.F_Main..Enabled(False)
		F.Intrinsic.Control.CallSub(100000Sync)
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.gsgcShip_RowCellClick.End

Program.Sub.cmdJobRefresh_Click.Start
'Refresh current back log valuation view
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCustomersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeJobs)
	F.Data.DataTable.Close("dtCustomersAg$dtJobs")
	F.Data.DataTable.Close("dtCustomersAg")
F.Intrinsic.Control.EndIf
' serialize and close job dashboard

Gui.F_Main..Enabled(False)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetOpenJobDataTable,"Debug",False)
' build job datatables dtCustomersAg and dtCustomersAg$dtJobs

'-------------------------------------
F.Intrinsic.Control.CallSub(SetupJobsGrid)
F.Intrinsic.Control.CallSub(DeserializeJobs)
' initialize and foramt dashboard

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdJobRefresh_Click.End

Program.Sub.GetOpenJobDataTable.Start
V.Local.sPartRevSQL.Declare
V.Local.sSQL.Declare
V.Local.sWhereSQL.Declare
V.Local.sFilter.Declare
V.Local.sCusts.Declare
V.Local.d30.Declare
V.Local.d31.Declare
V.Local.d60.Declare
V.Local.d61.Declare
V.Local.d90.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Date.DateAdd("d",30,V.Ambient.Date,V.Local.d30)
F.Intrinsic.Date.DateAdd("d",31,V.Ambient.Date,V.Local.d31)
F.Intrinsic.Date.DateAdd("d",60,V.Ambient.Date,V.Local.d60)
F.Intrinsic.Date.DateAdd("d",61,V.Ambient.Date,V.Local.d61)
F.Intrinsic.Date.DateAdd("d",90,V.Ambient.Date,V.Local.d90)
' calculate key dates for sql to create datasets that correspond to the date ranges displayed on dashboard

'-------------------------------------
V.Local.sPartRevSQL.Set("select rtrim(JOB) as JOB, rtrim(SUFFIX) as SUFFIX, rtrim(CUSTOMER) as CUSTOMER, ")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	F.Intrinsic.String.Build("{0}rtrim(left(PART, 17)) as PART_NUM, rtrim(right(PART, 3)) as REV, ",V.Local.sPartRevSQL,V.Local.sPartRevSQL)
F.Intrinsic.Control.Else
	'Rev is not in use
	F.Intrinsic.String.Build("{0}rtrim(PART) as PART, ",V.Local.sPartRevSQL,V.Local.sPartRevSQL)
F.Intrinsic.Control.EndIf
' build master string based on rev option

F.Intrinsic.Control.If(V.Screen.F_Main!chkParentWOs.CheckedAsBoolean)
	V.Local.sWhereSQL.Set(" and PARENT_WO = '';")
F.Intrinsic.Control.Else
	V.Local.sWhereSQL.Set(";")
F.Intrinsic.Control.EndIf

'-------------------------------------
F.Intrinsic.Control.If(V.Args.Debug)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf
F.ODBC.Connection!con.OpenCompanyConnection
F.Intrinsic.String.Build("{0}rtrim(LOCATION) as LOC, rtrim(DESCRIPTION) as DESCR, PRODUCT_LINE, QTY_ORDER, QTY_COMPLETED, DATE_OPENED, DATE_DUE, '{2}' as DUE_RANK from V_JOB_HEADER where DATE_CLOSED = '1900-01-01' and DATE_DUE < '{1}' and CUSTOMER <> ''{3}",V.Local.sPartRevSQL,V.Ambient.Date.PervasiveDate,V.Global.sLate,V.Local.sWhereSQL,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtJobsLate","con",V.Local.sSQL,True)
F.Intrinsic.String.Build("{0}rtrim(LOCATION) as LOC, rtrim(DESCRIPTION) as DESCR, PRODUCT_LINE, QTY_ORDER, QTY_COMPLETED, DATE_OPENED, DATE_DUE, '{3}' as DUE_RANK from V_JOB_HEADER where DATE_CLOSED = '1900-01-01' and DATE_DUE between '{1}' and '{2}' and CUSTOMER <> ''{4}",V.Local.sPartRevSQL,V.Ambient.Date.PervasiveDate,V.Local.d30.PervasiveDate,V.Global.s0to30,V.Local.sWhereSQL,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtJobs0to30","con",V.Local.sSQL,False)
F.Intrinsic.String.Build("{0}rtrim(LOCATION) as LOC, rtrim(DESCRIPTION) as DESCR, PRODUCT_LINE, QTY_ORDER, QTY_COMPLETED, DATE_OPENED, DATE_DUE, '{3}' as DUE_RANK from V_JOB_HEADER where DATE_CLOSED = '1900-01-01' and DATE_DUE between '{1}' and '{2}' and CUSTOMER <> ''{4}",V.Local.sPartRevSQL,V.Local.d31.PervasiveDate,V.Local.d60.PervasiveDate,V.Global.s31to60,V.Local.sWhereSQL,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtJobs31to60","con",V.Local.sSQL,False)
F.Intrinsic.String.Build("{0}rtrim(LOCATION) as LOC, rtrim(DESCRIPTION) as DESCR, PRODUCT_LINE, QTY_ORDER, QTY_COMPLETED, DATE_OPENED, DATE_DUE, '{3}' as DUE_RANK from V_JOB_HEADER where DATE_CLOSED = '1900-01-01' and DATE_DUE between '{1}' and '{2}' and CUSTOMER <> ''{4}",V.Local.sPartRevSQL,V.Local.d61.PervasiveDate,V.Local.d90.PervasiveDate,V.Global.s61to90,V.Local.sWhereSQL,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtJobs61to90","con",V.Local.sSQL,False)
F.Intrinsic.String.Build("{0}rtrim(LOCATION) as LOC, rtrim(DESCRIPTION) as DESCR, PRODUCT_LINE, QTY_ORDER, QTY_COMPLETED, DATE_OPENED, DATE_DUE, '{2}' as DUE_RANK from V_JOB_HEADER where DATE_CLOSED = '1900-01-01' and DATE_DUE > '{1}' and CUSTOMER <> ''{3}",V.Local.sPartRevSQL,V.Local.d90.PervasiveDate,V.Global.s91andUp,V.Local.sWhereSQL,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtJobs91andUp","con",V.Local.sSQL,False)
F.Data.DataTable.CreateFromSQL("dtCustomers","con","select rtrim(CUSTOMER) as CUSTOMER, rtrim(NAME_CUSTOMER) as CUST_NAME from V_CUSTOMER_MASTER;",False)
F.ODBC.Connection!con.Close
' use master string to build sql strings and create unique datasets that correspond to the date ranges displayed on the dashboard

'-------------------------------------
F.Data.DataTable.Clone("dtJobsLate","dtJobs",True)
F.Data.DataTable.Merge("dtJobsLate","dtJobs",True,3)
F.Data.DataTable.Close("dtJobsLate")
F.Data.DataTable.Merge("dtJobs0to30","dtJobs",True,3)
F.Data.DataTable.Close("dtJobs0to30")
F.Data.DataTable.Merge("dtJobs31to60","dtJobs",True,3)
F.Data.DataTable.Close("dtJobs31to60")
F.Data.DataTable.Merge("dtJobs61to90","dtJobs",True,3)
F.Data.DataTable.Close("dtJobs61to90")
F.Data.DataTable.Merge("dtJobs91andUp","dtJobs",True,3)
F.Data.DataTable.Close("dtJobs91andUp")
' combine unique datasets into one master set that uses the DUE_RANK column to differentiate where each row came from

'-------------------------------------
F.Intrinsic.String.Build("JOB.DUE_RANK = '{0}'",V.Global.sLate,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST",V.Enum.LinqSourceType!DataTable,"dtJobs*!*JOB","CUST.CUSTOMER = JOB.CUSTOMER","JOB.CUSTOMER*!*CUST.CUST_NAME*!*COUNT() as LATE_CNT",V.Local.sFilter,"JOB.CUSTOMER,CUST.CUST_NAME",,"dtCustLateAg",False)
F.Intrinsic.String.Build("JOB.DUE_RANK = '{0}'",V.Global.s0to30,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST",V.Enum.LinqSourceType!DataTable,"dtJobs*!*JOB","CUST.CUSTOMER = JOB.CUSTOMER","JOB.CUSTOMER*!*CUST.CUST_NAME*!*COUNT() as S0TO30_CNT",V.Local.sFilter,"JOB.CUSTOMER,CUST.CUST_NAME",,"dtCust0to30Ag",False)
F.Intrinsic.String.Build("JOB.DUE_RANK = '{0}'",V.Global.s31to60,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST",V.Enum.LinqSourceType!DataTable,"dtJobs*!*JOB","CUST.CUSTOMER = JOB.CUSTOMER","JOB.CUSTOMER*!*CUST.CUST_NAME*!*COUNT() as S31TO60_CNT",V.Local.sFilter,"JOB.CUSTOMER,CUST.CUST_NAME",,"dtCust31to60Ag",False)
F.Intrinsic.String.Build("JOB.DUE_RANK = '{0}'",V.Global.s61to90,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST",V.Enum.LinqSourceType!DataTable,"dtJobs*!*JOB","CUST.CUSTOMER = JOB.CUSTOMER","JOB.CUSTOMER*!*CUST.CUST_NAME*!*COUNT() as S61TO90_CNT",V.Local.sFilter,"JOB.CUSTOMER,CUST.CUST_NAME",,"dtCust61to90Ag",False)
F.Intrinsic.String.Build("JOB.DUE_RANK = '{0}'",V.Global.s91andUp,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST",V.Enum.LinqSourceType!DataTable,"dtJobs*!*JOB","CUST.CUSTOMER = JOB.CUSTOMER","JOB.CUSTOMER*!*CUST.CUST_NAME*!*COUNT() as S91ANDUP_CNT",V.Local.sFilter,"JOB.CUSTOMER,CUST.CUST_NAME",,"dtCust91andUpAg",False)
' use the master data set and the customer data set to aggegrate the different types of rows

'-------------------------------------
F.Data.DataTable.Create("dtCustList",False)
F.Data.DataTable.AddColumn("dtCustList","CUSTOMER","String")
F.Data.DataTable.Merge("dtCustLateAg","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust0to30Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust31to60Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust61to90Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust91andUpAg","dtCustList",True,2)
F.Data.DataView.Create("dtCustList","dvDistinct")
F.Data.DataView.SetSort("dtCustList","dvDistinct","CUSTOMER desc")
F.Data.DataView.ToDataTableDistinct("dtCustList","dvDistinct","dtCustListDist","CUSTOMER")
F.Data.DataTable.Close("dtCustList")
' Get list of customers that have data

'-------------------------------------
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtCustListDist*!*CUSTLIST",V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST","CUSTLIST.CUSTOMER = CUST.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCustLateAg*!*LATE","CUST.CUSTOMER = LATE.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust0to30Ag*!*ZERO","CUST.CUSTOMER = ZERO.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust31to60Ag*!*THIRTY","CUST.CUSTOMER = THIRTY.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust61to90Ag*!*SIXTY","CUST.CUSTOMER = SIXTY.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust91andUpAg*!*NINETY","CUST.CUSTOMER = NINETY.CUSTOMER","CUST.CUSTOMER*!*CUST.CUST_NAME*!*LATE.LATE_CNT*!*ZERO.S0TO30_CNT*!*THIRTY.S31TO60_CNT*!*SIXTY.S61TO90_CNT*!*NINETY.S91ANDUP_CNT",,,"CUST.CUSTOMER","dtCustomersAg",True)
F.Data.DataTable.Close("dtCustListDist")
F.Data.DataTable.Close("dtCustomers")
F.Data.DataTable.Close("dtCustLateAg")
F.Data.DataTable.Close("dtCust0to30Ag")
F.Data.DataTable.Close("dtCust31to60Ag")
F.Data.DataTable.Close("dtCust61to90Ag")
F.Data.DataTable.Close("dtCust91andUpAg")
' combine the separate aggegrate data tables into one aggregate table and close all the datatables not used anymore

'-------------------------------------
F.Data.DataTable.Clone("dtJobs","dtCustomersAg$dtJobs",True)
F.Data.DataTable.Merge("dtJobs","dtCustomersAg$dtJobs",True,3)
F.Data.DataTable.Close("dtJobs")
' convert master data set into child of aggegrate table

'-------------------------------------
F.Data.DataTable.AddRelation("dtCustomersAg","CUSTOMER","dtCustomersAg$dtJobs","CUSTOMER","CustJobs")
' set relation between aggregate table and child table

'-------------------------------------
F.Data.DataView.Create("dtCustomersAg$dtJobs","dvJobs")
F.Data.DataView.SetSort("dtCustomersAg","dvJobs","DATE_DUE asc")
' create dataview of child table to be used on dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetOpenJobDataTable.End

Program.Sub.SetupJobsGrid.Start
F.Intrinsic.Control.Try

'-------------------------------------
Gui.F_Main.gsgcJob.AddGridviewFromDatatable("gvJobsTot","dtCustomersAg")
Gui.F_Main.gsgcJob.AddGridviewFromDataview("gvJobs","dtCustomersAg","dvJobs")
' attach aggregate table and child view to grid

'-------------------------------------
Gui.F_Main.gsgcJob.SetGridviewProperty("gvJobsTot","Editable",False)
Gui.F_Main.gsgcJob.SetGridviewProperty("gvJobsTot","ReadOnly",True)
Gui.F_Main.gsgcJob.SetGridviewProperty("gvJobsTot","OptionsViewColumnAutoWidth",False)
' set basic gridview properties for aggregate table

'-------------------------------------
Gui.F_Main.gsgcJob.SetGridviewProperty("gvJobs","Editable",False)
Gui.F_Main.gsgcJob.SetGridviewProperty("gvJobs","ReadOnly",True)
Gui.F_Main.gsgcJob.SetGridviewProperty("gvJobs","OptionsViewColumnAutoWidth",False)
' set basic gridview properties for child view

'-------------------------------------
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DUE_RANK","Visible",False)
' set DUE_RANK field to not show as it is not important due to color formatting

'-------------------------------------
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUSTOMER","Caption","Cust No.*")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","CUSTOMER","Caption","Cust No.*")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","CUSTOMER","Visible",False)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUST_NAME","Caption","Customer")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","Caption","Late")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","Caption","0 to 30")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","Caption","31 to 60")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","Caption","61 to 90")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","Caption","90 +")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","JOB","Caption","Job*")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","SUFFIX","Caption","Suffix*")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART_NUM","Caption","Part Number*")
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","REV","Caption","Rev*")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART","Caption","Part Number*")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","LOC","Caption","Loc")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DESCR","Caption","Description")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PRODUCT_LINE","Caption","PL")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_ORDER","Caption","Order Qty")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_COMPLETED","Caption","Completed Qty")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_OPENED","Caption","Open Date")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_DUE","Caption","Due Date")
' set captions and mark duplicate fields in child view as invisible

'-------------------------------------
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUSTOMER","Width",75)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","CUSTOMER","Width",75)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUST_NAME","Width",150)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","Width",70)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","Width",80)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","Width",80)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","Width",80)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","Width",70)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","JOB","Width",50)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","SUFFIX","Width",65)
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART_NUM","Width",115)
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","REV","Width",55)
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART","Width",135)
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","LOC","Width",50)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DESCR","Width",150)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PRODUCT_LINE","Width",45)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_ORDER","Width",95)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_COMPLETED","Width",105)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_OPENED","Width",90)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_DUE","Width",90)
' set widths

'-------------------------------------
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUSTOMER","HeaderHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","CUSTOMER","HeaderHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUST_NAME","HeaderHAlignment","Near")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","HeaderHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","HeaderHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","HeaderHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","HeaderHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","HeaderHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","JOB","HeaderHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","SUFFIX","HeaderHAlignment","Center")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART_NUM","HeaderHAlignment","Center")
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","REV","HeaderHAlignment","Center")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART","HeaderHAlignment","Center")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","LOC","HeaderHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DESCR","HeaderHAlignment","Near")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PRODUCT_LINE","HeaderHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_ORDER","HeaderHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_COMPLETED","HeaderHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_OPENED","HeaderHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_DUE","HeaderHAlignment","Center")
' set header alignments

'-------------------------------------
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUSTOMER","CellHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","CUSTOMER","CellHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUST_NAME","CellHAlignment","Near")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","CellHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","CellHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","CellHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","CellHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","CellHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","JOB","CellHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","SUFFIX","CellHAlignment","Center")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART_NUM","CellHAlignment","Center")
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","REV","CellHAlignment","Center")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART","CellHAlignment","Center")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","LOC","CellHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DESCR","CellHAlignment","Near")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PRODUCT_LINE","CellHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_ORDER","CellHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_COMPLETED","CellHAlignment","Far")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_OPENED","CellHAlignment","Center")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_DUE","CellHAlignment","Center")
' set cell alignments

'-------------------------------------
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_OPENED","DisplayCustomDateTime","d")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","DATE_DUE","DisplayCustomDateTime","d")
' set date formats to MM/DD/YYYY

'-------------------------------------
'Integer
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","EditMaskType","Numeric")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","EditMask","#,###,##0")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","EditMaskAsDisplayFormat",True)
'Integer
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","EditMaskType","Numeric")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","EditMask","#,###,##0")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","EditMaskAsDisplayFormat",True)
'Integer
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","EditMaskType","Numeric")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","EditMask","#,###,##0")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","EditMaskAsDisplayFormat",True)
'Integer
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","EditMaskType","Numeric")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","EditMask","#,###,##0")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","EditMaskAsDisplayFormat",True)
'Integer
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","EditMaskType","Numeric")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","EditMask","#,###,##0")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","EditMaskAsDisplayFormat",True)
'Float
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_ORDER","EditMaskType","Numeric")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_ORDER","EditMask","#,###,##0.0000")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_ORDER","EditMaskAsDisplayFormat",True)
'Float
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_COMPLETED","EditMaskType","Numeric")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_COMPLETED","EditMask","#,###,##0.0000")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","QTY_COMPLETED","EditMaskAsDisplayFormat",True)
' set numeric formats

'-------------------------------------
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUSTOMER","IsHyperlink",True)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUSTOMER","ToolTip","*Double-click to open")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","CUSTOMER","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART_NUM","IsHyperlink",True)
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART_NUM","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART_NUM","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","REV","IsHyperlink",True)
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","REV","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","REV","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART","IsHyperlink",True)
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","PART","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","JOB","IsHyperlink",True)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","JOB","ToolTip","*Double-click to open")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","JOB","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","SUFFIX","IsHyperlink",True)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","SUFFIX","ToolTip","*Double-click to open")
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobs","SUFFIX","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
' set the cell font color to blue for clickable fields

Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","HeaderForeColor",V.Enum.ThemeColors!ColorRed.Plus)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","LATE_CNT","HeaderFontBold",True)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","HeaderForeColor",V.Enum.ThemeColors!ColorYellow.Plus)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S0TO30_CNT","HeaderFontBold",True)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","HeaderForeColor",V.Enum.ThemeColors!ColorGreen.Plus)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S31TO60_CNT","HeaderFontBold",True)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","HeaderForeColor",V.Enum.ThemeColors!ColorBlue.Plus)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S61TO90_CNT","HeaderFontBold",True)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","HeaderForeColor",V.Enum.ThemeColors!ColorPurple.Plus)
Gui.F_Main.gsgcJob.SetColumnProperty("gvJobsTot","S91ANDUP_CNT","HeaderFontBold",True)

'-------------------------------------
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobsTot","LATE_CNT","LATERANK","Greater",0)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobs","DUE_RANK","LATERANKJOB","Equal",V.Global.sLate)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobsTot","LATE_CNT","LATERANK","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","LATERANKJOB","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","LATERANKJOB","ApplyToRow",True)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobsTot","S0TO30_CNT","S0TO30RANK","Greater",0)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobs","DUE_RANK","S0TO30RANKJOB","Equal",V.Global.s0to30)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobsTot","S0TO30_CNT","S0TO30RANK","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S0TO30RANKJOB","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S0TO30RANKJOB","ApplyToRow",True)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobsTot","S31TO60_CNT","S31TO60RANK","Greater",0)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobs","DUE_RANK","S31TO60RANKJOB","Equal",V.Global.s31to60)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobsTot","S31TO60_CNT","S31TO60RANK","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S31TO60RANKJOB","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S31TO60RANKJOB","ApplyToRow",True)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobsTot","S61TO90_CNT","S61TO90RANK","Greater",0)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobs","DUE_RANK","S61TO90RANKJOB","Equal",V.Global.s61to90)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobsTot","S61TO90_CNT","S61TO90RANK","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S61TO90RANKJOB","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S61TO90RANKJOB","ApplyToRow",True)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobsTot","S91ANDUP_CNT","S91ANDUPRANK","Greater",0)
Gui.F_Main.gsgcJob.AddStyleFormatCondition("gvJobs","DUE_RANK","S91ANDUPRANKJOB","Equal",V.Global.s91andUp)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobsTot","S91ANDUP_CNT","S91ANDUPRANK","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S91ANDUPRANKJOB","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcJob.SetStyleFormatConditionProperty("gvJobs","DUE_RANK","S91ANDUPRANKJOB","ApplyToRow",True)
' use color formatting to visually connect the jobs to their date range

'-------------------------------------
Gui.F_Main.gsgcJob.MainView("gvJobsTot")
' initialize dashboard

Gui.F_Main.gsgcJob.TabStop(True)
Gui.F_Main.gsgcJob.TabIndex(2)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SetupJobsGrid.End

Program.Sub.SerializeJobs.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVJOBSTOT
Gui.F_Main.gsgcJob.Serialize("gvJobsTot",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVJOBSTOT",5784,4000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

'GridView - GVJOBS
Gui.F_Main.gsgcJob.Serialize("gvJobs",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVJOBS",5784,5000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SerializeJobs.End

Program.Sub.DeserializeJobs.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVJOBSTOT
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVJOBSTOT",5784,4000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcJob.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

'GridView - GVJOBS
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVJOBS",5784,5000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcJob.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.DeserializeJobs.End

Program.Sub.ExpandJobRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCustomersAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcJob.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtCustomersAg.RowCount--,1)
		Gui.F_Main.gsgcJob.ExpandMasterRow("gvJobsTot",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcJob.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' expand all expandable rows on job dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ExpandJobRows.End

Program.Sub.CollapseJobRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCustomersAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcJob.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtCustomersAg.RowCount--,1)
		Gui.F_Main.gsgcJob.CollapseMasterRow("gvJobsTot",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcJob.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' collapse all expanded rows on job dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.CollapseJobRows.End

Program.Sub.gsgcJob_RowCellClick.Start
V.Local.sDataTable.Declare
V.Local.sPart.Declare
V.Local.sPath.Declare
V.Local.bExists.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.Args.Clicks,!=,2,"or",V.Args.Button.UCase,!=,"LEFT") 
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
' parse clicking on grid so that only a double tap with the left mouse button can launch a GS screen

'-------------------------------------
Gui.F_Main.gsgcJob.GetFocusedGridview(V.Local.sDataTable)
F.Intrinsic.Control.If(V.Local.sDataTable.UCase,=,"DTJOBS")
	V.Local.sDataTable.Set("dtCustomersAg$dtJobs")
F.Intrinsic.Control.EndIf
' parse job dashboard for if the aggregate table or the child view was clicked

'-------------------------------------
F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
	F.Intrinsic.Control.CaseAny("PART_NUM","REV")
		'Open Supply and Demand Screen
		F.Intrinsic.String.GSSPartString(V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).PART_NUM!FieldVal,V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).REV!FieldVal,V.Local.sPart)
		F.Intrinsic.String.Build("{0}bin\SupplyAndDemand.exe",V.Caller.LocalGSSTempDir,V.Local.sPath)
		F.Intrinsic.File.Exists(V.Local.sPath,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBER",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).PART_NUM!FieldVal)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBERREVISION",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).REV!FieldVal)
			F.Intrinsic.Task.SetEnvironmentVariable("LOCATIONCODE",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Task.LaunchAsync(V.Local.sPath,1,V.Local.sPath)
		F.Intrinsic.Control.Else
			F.Data.DataTable.AddRow("300011","Part",V.Local.sPart,"Location",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal,"Switch","")
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(300011Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("PART")
		'Open Supply and Demand Screen
		F.Intrinsic.String.Build("{0}bin\SupplyAndDemand.exe",V.Caller.LocalGSSTempDir,V.Local.sPath)
		F.Intrinsic.File.Exists(V.Local.sPath,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBER",V.Args.CellValue)
			F.Intrinsic.Task.SetEnvironmentVariable("LOCATIONCODE",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Task.LaunchAsync(V.Local.sPath,1,V.Local.sPath)
		F.Intrinsic.Control.Else
			F.Data.DataTable.AddRow("300011","Part",V.Args.CellValue,"Location",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal,"Switch","")
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(300011Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("CUSTOMER")
		'Open Customer Master Screen
		F.Data.DataTable.AddRow("100000","Mode","V","ProspectFlag","","Customer",V.Args.CellValue)
		Gui.F_Main..Enabled(False)
		F.Intrinsic.Control.CallSub(100000Sync)
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.CaseAny("JOB","SUFFIX")
		'Open WO View Screen
		F.Data.DataTable.AddRow("450000","Mode","7","WONum",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).JOB!FieldVal,"WOSuffix",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).SUFFIX!FieldVal,"ActOrHist","A")
		Gui.F_Main..Enabled(False)
		F.Intrinsic.Control.CallSub(450000Sync)
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.gsgcJob_RowCellClick.End

Program.Sub.cmdCashRefresh_Click.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCashAcctSumm.Exists)
	F.Intrinsic.Control.CallSub(SerializeCashAccounts)
	F.Data.DataTable.Close("dtCashAcctSumm")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtARAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAR)
	F.Data.DataTable.Close("dtARAgingAg$dtARAging")
	F.Data.DataTable.Close("dtARAgingAg")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtAPAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAP)
	F.Data.DataTable.Close("dtAPAgingAg$dtAPAging")
	F.Data.DataTable.Close("dtAPAgingAg")
F.Intrinsic.Control.EndIf
' Serialize and close AR aging, AP aging and Cash Accounts Summary dashboards

Gui.F_Main..Enabled(False)

Gui.F_Main.progressPanelCashFlow.Caption("Please wait")
Gui.F_Main.progressPanelCashFlow.Detail("Getting cash accounts data")
Gui.F_Main.progressPanelCashFlow.Visible(True)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetCashAccountsDataTable,"Debug",False)
' Build dtCashAcctSumm table
Gui.F_Main.progressPanelCashFlow.Detail("Getting AR aging data")
'-------------------------------------
F.Intrinsic.Control.CallSub(GetARAgingDataTable,"Debug",False)
' Build dtARAging and dtARAgingAg tables
Gui.F_Main.progressPanelCashFlow.Detail("Getting AP aging data")
'-------------------------------------
F.Intrinsic.Control.CallSub(GetAPAgingDataTable,"Debug",False)
' Build dtAPAging and dtAPAgingAg tables

Gui.F_Main.progressPanelCashFlow.Detail("Setting up dashboard views")
'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCashAcctSumm.Exists)
	F.Intrinsic.Control.CallSub(SetupCashAccountsGrid)
	F.Intrinsic.Control.CallSub(DeserializeCashAccounts)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(SetupARGrid)
F.Intrinsic.Control.CallSub(DeserializeAR)
F.Intrinsic.Control.CallSub(SetupAPGrid)
F.Intrinsic.Control.CallSub(DeserializeAP)
' initialize and format grids before deserializing

Gui.F_Main.progressPanelCashFlow.Visible(False)

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdCashRefresh_Click.End

Program.Sub.GetCashAccountsDataTable.Start
V.Local.sCashAccounts.Declare
V.Local.sSQL.Declare
V.Local.sFiscalYearNum.Declare
V.Local.dFiscalYearBeg.Declare
V.Local.dFiscalYearEnd.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.String.Join(V.Global.sCashAccounts,"', '",V.Local.sCashAccounts)
F.Intrinsic.String.Build("select top 1 START_YEAR, BEG_DATE from V_GL_CALENDAR where PERIOD = '01' and BEG_DATE <= '{0}' order by START_YEAR desc;",V.Ambient.Date.PervasiveDate,V.Local.sSQL)
F.ODBC.Connection!con.OpenCompanyConnection
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
F.Intrinsic.String.Split(V.Local.sSQL,"*!*",V.Local.sSQL)
V.Local.sFiscalYearNum.Set(V.Local.sSQL(0))
V.Local.dFiscalYearBeg.Set(V.Local.sSQL(1))
V.Local.sSQL.Redim(0,0)
F.Intrinsic.String.Build("select top 1 END_DATE from V_GL_CALENDAR where START_YEAR = '{0}' order by PERIOD desc;",V.Local.sFiscalYearNum,V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
V.Local.dFiscalYearEnd.Set(V.Local.sSQL)
F.Intrinsic.String.Build("select rtrim(ACCT) as ACCT, BEG_BAL from V_GL_BALANCES where FISCAL_YR = '{0}' and ACCT in ('{1}');",V.Local.sFiscalYearNum,V.Local.sCashAccounts,V.Local.sSQL)
F.Intrinsic.Control.If(V.Args.Debug)
	'DEBUGGING ONLY v
	'This code executes if the right-click option is used on the refresh button
	F.Data.DataTable.Create("dtAcctBegBal")
	F.Data.DataTable.AddColumn("dtAcctBegBal","ACCT","String")
	F.Data.DataTable.AddColumn("dtAcctBegBal","BEG_BAL","Float")
	F.Data.DataTable.AddRow("dtAcctBegBal","ACCT","100","BEG_BAL",525957.82)
	F.Data.DataTable.AddRow("dtAcctBegBal","ACCT","131-1","BEG_BAL",795.57)
	'DEBUGGING ONLY ^
F.Intrinsic.Control.Else
	F.Data.DataTable.CreateFromSQL("dtAcctBegBal","con",V.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.dtAcctBegBal.RowCount,=,0)
		'No beggining balances found for current FY, exiting sub
		F.ODBC.Connection!con.Close
		F.Intrinsic.UI.Msgbox("ERROR: Could not find beginning balances for accounts; skipping Cash Accounts Summary.")
		F.Data.DataTable.Close("dtAcctBegBal")
		Gui.F_Main..SetFocus
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("select rtrim(GL_NUMBER) as ACCT, BATCH, LINE, SEQ, POST_DATE_SQL as DATE_TRANS, AMOUNT_CMPNY as AMT from V_GL_DETAIL where POST_DATE_SQL between '{0}' and '{1}' and GL_NUMBER in ('{2}')",V.Local.dFiscalYearBeg.PervasiveDate,V.Ambient.Date.PervasiveDate,V.Local.sCashAccounts,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtGLSummary","con",V.Local.sSQL)
F.ODBC.Connection!con.Close
' Build SQL for getting the cash accounts beginning balances of fiscal year and all the transactions that have happened since then and build the data sets needed

'-------------------------------------
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtGLSummary*!*DTL",V.Enum.LinqSourceType!DataTable,"dtGLSummary*!*DTL2","DTL.BATCH = DTL2.BATCH and DTL.LINE = DTL2.LINE and DTL.SEQ = DTL2.SEQ","DTL.ACCT*!*SUM(DTL.AMT) as DTL_TOT",,"DTL.ACCT",,"dtGLTotal",False)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtAcctBegBal*!*BEG",V.Enum.LinqSourceType!DataTable,"dtGLTotal*!*DTL","BEG.ACCT = DTL.ACCT","BEG.ACCT*!*BEG.BEG_BAL*!*DTL.DTL_TOT",,,"BEG.ACCT asc","dtCashAcctSumm",True)
F.Data.DataTable.Close("dtAcctBegBal")
F.Data.DataTable.Close("dtGLSummary")
' Use cash accounts beginning balances and the summary of the transactions to make one table with one row per account that has BEG_BAL and DTL_TOT

'-------------------------------------
F.Data.DataTable.AddExpressionColumn("dtCashAcctSumm","ACCT_TOT","Float","BEG_BAL + ISNULL(DTL_TOT, 0)")
' Sum BEG_BAL and DTL_TOT to display on dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetCashAccountsDataTable.End

Program.Sub.SetupCashAccountsGrid.Start
F.Intrinsic.Control.Try

'-------------------------------------
Gui.F_Main.gsgcCash.AddGridviewFromDataTable("gvCash","dtCashAcctSumm")
' add cash accounts table to grid

'-------------------------------------
Gui.F_Main.gsgcCash.SetGridviewProperty("gvCash","Editable",False)
Gui.F_Main.gsgcCash.SetGridviewProperty("gvCash","ReadOnly",True)
Gui.F_Main.gsgcCash.SetGridviewProperty("gvCash","OptionsViewColumnAutoWidth",False)
' set grid view properties

'-------------------------------------
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","BEG_BAL","Visible",False)
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","DTL_TOT","Visible",False)
' set fields that are not needed to Visible = False

'-------------------------------------
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT","Caption","Account")
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT_TOT","Caption","Balance")
' captions

'-------------------------------------
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT","Width",75)
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT_TOT","Width",100)
' widths

'-------------------------------------
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT","HeaderHAlignment","Center")
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT_TOT","HeaderHAlignment","Far")
' header horizontal alignments

'-------------------------------------
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT","CellHAlignment","Center")
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT_TOT","CellHAlignment","Far")
' cell horizontal alignments

'-------------------------------------
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcCash.SetColumnProperty("gvCash","ACCT_TOT","EditMaskAsDisplayFormat",True)
' set number formats

'-------------------------------------
Gui.F_Main.gsgcCash.MainView("gvCash")
' view dashboard

Gui.F_Main.gsgcCash.TabStop(True)
Gui.F_Main.gsgcCash.TabIndex(6)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SetupCashAccountsGrid.End

Program.Sub.SerializeCashAccounts.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVCASH
Gui.F_Main.gsgcCash.Serialize("gvCash",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVCASH",5784,3000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SerializeCashAccounts.End

Program.Sub.DeserializeCashAccounts.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVCASH
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVCASH",5784,3000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcCash.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.DeserializeCashAccounts.End

Program.Sub.splitARAP_DblClick.Start
V.Local.iPos.Declare
'Sub margin on left and right sides from width of slider
F.Intrinsic.Math.Sub(V.Screen.F_Main!splitARAP.Width,6,V.Local.iPos)
'Divide by two to get half
F.Intrinsic.Math.Div(V.Local.iPos,2,V.Local.iPos)
Gui.F_Main.splitARAP.SplitterPosition(V.Local.iPos)
Program.Sub.splitARAP_DblClick.End

Program.Sub.GetARAgingDataTable.Start
V.Local.sSQL.Declare
V.Local.sFilter.Declare
V.Local.sExpression.Declare
V.Local.d30.Declare
V.Local.d31.Declare
V.Local.d60.Declare
V.Local.d61.Declare
V.Local.d90.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Date.DateAdd("d",-30,V.Ambient.Date,V.Local.d30)
F.Intrinsic.Date.DateAdd("d",-31,V.Ambient.Date,V.Local.d31)
F.Intrinsic.Date.DateAdd("d",-60,V.Ambient.Date,V.Local.d60)
F.Intrinsic.Date.DateAdd("d",-61,V.Ambient.Date,V.Local.d61)
F.Intrinsic.Date.DateAdd("d",-90,V.Ambient.Date,V.Local.d90)
' get dates to categorize data from today

'-------------------------------------
F.Intrinsic.Control.If(V.Screen.F_Main!optARInvDate.Value)
	F.Intrinsic.String.Build("select rtrim(ucase(CUSTOMER)) as CUSTOMER, rtrim(INVOICE) as INVOICE, rtrim(BATCH_NUM) as BATCH_NUM, rtrim(BATCH_LINE) as BATCH_LINE, BATCH_CODE, DATE_INVOICE, cast(year(DATE_INVOICE) as char(4)) as YEAR_INVOICE, if(month(DATE_INVOICE) < 10, '0', '') + cast(month(DATE_INVOICE) as char(2)) as MONTH_INVOICE, if(day(DATE_INVOICE) < 10, '0', '') + cast(day(DATE_INVOICE) as char(2)) as DAY_INVOICE, AMT_INVOICE, abs(AMT_INVOICE) as ABS_AMT, rtrim(GL_ACCOUNT) as GL_ACCOUNT, REFERENCE from V_AR_OPEN_ITEMS where CUSTOMER <> '';",V.Ambient.Date.PervasiveDate,V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select rtrim(ucase(CUSTOMER)) as CUSTOMER, rtrim(INVOICE) as INVOICE, rtrim(BATCH_NUM) as BATCH_NUM, rtrim(BATCH_LINE) as BATCH_LINE, BATCH_CODE, DUE_DATE as DATE_INVOICE, cast(year(DUE_DATE) as char(4)) as YEAR_INVOICE, if(month(DUE_DATE) < 10, '0', '') + cast(month(DUE_DATE) as char(2)) as MONTH_INVOICE, if(day(DUE_DATE) < 10, '0', '') + cast(day(DUE_DATE) as char(2)) as DAY_INVOICE, AMT_INVOICE, abs(AMT_INVOICE) as ABS_AMT, rtrim(GL_ACCOUNT) as GL_ACCOUNT, REFERENCE from V_AR_OPEN_ITEMS where CUSTOMER <> '';",V.Ambient.Date.PervasiveDate,V.Local.sSQL)
F.Intrinsic.Control.EndIf
' build sql string based on radio button options

F.Intrinsic.Control.If(V.Args.Debug)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf

'-------------------------------------
F.ODBC.Connection!con.OpenCompanyConnection
F.Data.DataTable.CreateFromSQL("dtARAging","con",V.Local.sSQL,True)
F.Data.DataTable.CreateFromSQL("dtCustomers","con","select distinct rtrim(ucase(CUSTOMER)) as CUSTOMER, rtrim(NAME_CUSTOMER) as CUST_NAME from V_CUSTOMER_MASTER;",False)
F.ODBC.Connection!con.Close
' create data sets

'-------------------------------------
F.Data.DataTable.AddExpressionColumn("dtARAging","TYPE","String","IIF(BATCH_CODE = '10', 'Invoice', IIF(BATCH_CODE = '11', 'Cash', IIF(BATCH_CODE = '12', 'Credit Memo', IIF(BATCH_CODE = '13', 'Adjustment', IIF(BATCH_CODE = '15', 'Fin. Charge', IIF(BATCH_CODE = '16', 'Discount', BATCH_CODE))))))")
' convert BATCH_CODE number to a description that the end user can use

'-------------------------------------
F.Data.DataTable.AddExpressionColumn("dtARAging","DATE_INVOICE_STR","String","TRIM(YEAR_INVOICE) + TRIM(MONTH_INVOICE) + TRIM(DAY_INVOICE)")
F.Intrinsic.String.Build("IIF(DATE_INVOICE_STR >= '{0}', '{10}', IIF(DATE_INVOICE_STR < '{0}' and DATE_INVOICE_STR >= '{1}', '{6}', IIF(DATE_INVOICE_STR <= '{2}' and DATE_INVOICE_STR >= '{3}', '{7}', IIF(DATE_INVOICE_STR <= '{4}' and DATE_INVOICE_STR >= '{5}', '{8}', '{9}'))))",V.Ambient.Date.FormatYYYYMMDD,V.Local.d30.FormatYYYYMMDD,V.Local.d31.FormatYYYYMMDD,V.Local.d60.FormatYYYYMMDD,V.Local.d61.FormatYYYYMMDD,V.Local.d90.FormatYYYYMMDD,V.Global.s0to30,V.Global.s31to60,V.Global.s61to90,V.Global.s91andUp,V.Global.sCurrent,V.Local.sExpression)
F.Data.DataTable.AddExpressionColumn("dtARAging","DUE_RANK","String",V.Local.sExpression)
' categorize the records in their respective groups based on date

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Coalescing AR invoices to calculate their aged totals")
F.Data.DataView.Create("dtARAging","dvLowerMemoryUsage")
F.Data.DataView.SetFilter("dtARAging","dvLowerMemoryUsage","INVOICE = '-1'")
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtARAging*!*OPEN",V.Enum.LinqSourceType!DataView,"dtARAging","dvLowerMemoryUsage*!*OPEN2","OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.CUSTOMER*!*OPEN.INVOICE*!*SUM(OPEN.AMT_INVOICE) as INVOICE_TOT",,"OPEN.CUSTOMER,OPEN.INVOICE",,"dtInvoiceTots",False)
' coalesce the records by customer and invoice to get invoice totals

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Removing AR invoices that have been paid")
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtARAging*!*OPEN",V.Enum.LinqSourceType!DataTable,"dtInvoiceTots*!*INVOICE","OPEN.CUSTOMER = INVOICE.CUSTOMER and OPEN.INVOICE = INVOICE.INVOICE","OPEN.CUSTOMER*!*OPEN.INVOICE*!*OPEN.BATCH_NUM*!*OPEN.BATCH_LINE*!*OPEN.BATCH_CODE*!*OPEN.DATE_INVOICE*!*OPEN.YEAR_INVOICE*!*OPEN.MONTH_INVOICE*!*OPEN.DAY_INVOICE*!*OPEN.AMT_INVOICE*!*OPEN.ABS_AMT*!*INVOICE.INVOICE_TOT as AMT_REM*!*OPEN.GL_ACCOUNT*!*OPEN.REFERENCE","INVOICE.INVOICE_TOT > 0.001",,,"dtARAgingNoZero",True)
F.Data.DataTable.DeleteRow("dtARAging")
F.Data.DataTable.AcceptChanges("dtARAging")
F.Data.DataTable.AddColumn("dtARAging","AMT_REM","Float")
F.Data.DataTable.Merge("dtARAgingNoZero","dtARAging",True,2)
F.Data.DataTable.Close("dtARAgingNoZero")
' parse AR Aging to remove the invoices that total to 0

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Coalescing AR data into their date ranges")
F.Data.DataView.Create("dtARAging","dvCurrent")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.sCurrent,V.Local.sFilter)
F.Data.DataView.SetFilter("dtARAging","dvCurrent",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtARAging","dvCurrent*!*OPEN",V.Enum.LinqSourceType!DataView,"dtARAging","dvCurrent*!*OPEN2","OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.CUSTOMER*!*SUM(OPEN.AMT_INVOICE) as SCURR_TOT",,"OPEN.CUSTOMER",,"dtCustCurrent",False)
F.Data.DataView.Close("dtARAging","dvCurrent")
F.Data.DataView.Create("dtARAging","dv0to30")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s0to30,V.Local.sFilter)
F.Data.DataView.SetFilter("dtARAging","dv0to30",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtARAging","dv0to30*!*OPEN",V.Enum.LinqSourceType!DataView,"dtARAging","dv0to30*!*OPEN2","OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.CUSTOMER*!*SUM(OPEN.AMT_INVOICE) as S0TO30_TOT",,"OPEN.CUSTOMER",,"dtCust0to30Ag",False)
F.Data.DataView.Close("dtARAging","dv0to30")
F.Data.DataView.Create("dtARAging","dv31to60")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s31to60,V.Local.sFilter)
F.Data.DataView.SetFilter("dtARAging","dv31to60",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtARAging","dv31to60*!*OPEN",V.Enum.LinqSourceType!DataView,"dtARAging","dv31to60*!*OPEN2","OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.CUSTOMER*!*SUM(OPEN.AMT_INVOICE) as S31TO60_TOT",,"OPEN.CUSTOMER",,"dtCust31to60Ag",False)
F.Data.DataView.Close("dtARAging","dv31to60")
F.Data.DataView.Create("dtARAging","dv61to90")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s61to90,V.Local.sFilter)
F.Data.DataView.SetFilter("dtARAging","dv61to90",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtARAging","dv61to90*!*OPEN",V.Enum.LinqSourceType!DataView,"dtARAging","dv61to90*!*OPEN2","OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.CUSTOMER*!*SUM(OPEN.AMT_INVOICE) as S61TO90_TOT",,"OPEN.CUSTOMER",,"dtCust61to90Ag",False)
F.Data.DataView.Close("dtARAging","dv61to90")
F.Data.DataView.Create("dtARAging","dv91plus")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s91andUp,V.Local.sFilter)
F.Data.DataView.SetFilter("dtARAging","dv91plus",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtARAging","dv91plus*!*OPEN",V.Enum.LinqSourceType!DataView,"dtARAging","dv91plus*!*OPEN2","OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.CUSTOMER*!*SUM(OPEN.AMT_INVOICE) as S91ANDUP_TOT",,"OPEN.CUSTOMER",,"dtCust91andUpAg",False)
F.Data.DataView.Close("dtARAging","dv91plus")
' coalesce the groups to calculate totals by customer

'-------------------------------------
F.Data.DataTable.Create("dtCustList",False)
F.Data.DataTable.AddColumn("dtCustList","CUSTOMER","String")
F.Data.DataTable.Merge("dtCustCurrent","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust0to30Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust31to60Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust61to90Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtCust91andUpAg","dtCustList",True,2)
F.Data.DataView.Create("dtCustList","dvDistinct")
F.Data.DataView.SetSort("dtCustList","dvDistinct","CUSTOMER desc")
F.Data.DataView.ToDataTableDistinct("dtCustList","dvDistinct","dtCustListDist","CUSTOMER")
F.Data.DataTable.Close("dtCustList")
' Get list of customers that have data

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Combining coalesced AR into one data set")
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtCustListDist*!*CUSTLIST",V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST","CUSTLIST.CUSTOMER = CUST.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCustCurrent*!*CURR","CUST.CUSTOMER = CURR.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust0to30Ag*!*ZERO","CUST.CUSTOMER = ZERO.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust31to60Ag*!*THIRTY","CUST.CUSTOMER = THIRTY.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust61to90Ag*!*SIXTY","CUST.CUSTOMER = SIXTY.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtCust91andUpAg*!*NINETY","CUST.CUSTOMER = NINETY.CUSTOMER","CUST.CUSTOMER*!*CUST.CUST_NAME*!*CURR.SCURR_TOT*!*ZERO.S0TO30_TOT*!*THIRTY.S31TO60_TOT*!*SIXTY.S61TO90_TOT*!*NINETY.S91ANDUP_TOT",,,"CUST.CUSTOMER","dtARAgingAg",True)
F.Data.DataTable.Close("dtCustListDist")
F.Data.DataTable.Close("dtCustomers")
F.Data.DataTable.Close("dtCustCurrent")
F.Data.DataTable.Close("dtCust0to30Ag")
F.Data.DataTable.Close("dtCust31to60Ag")
F.Data.DataTable.Close("dtCust61to90Ag")
F.Data.DataTable.Close("dtCust91andUpAg")
' combine the coalesced data into one data set

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Calculating AR data totals for all customers")
F.Data.DataTable.AddExpressionColumn("dtARAgingAg","AGE_TOT","Float","ISNULL(SCURR_TOT, 0) + ISNULL(S0TO30_TOT, 0) + ISNULL(S31TO60_TOT, 0) + ISNULL(S61TO90_TOT, 0) + ISNULL(S91ANDUP_TOT, 0)")
' add expression column for totals on all customers

'-------------------------------------
F.Data.DataView.Create("dtARAgingAg","dvNullFinder")
F.Data.DataView.SetFilter("dtARAgingAg","dvNullFinder","isnull(SCURR_TOT, 0) = 0")
F.Data.DataView.SetValue("dtARAgingAg","dvNullFinder",-1,"SCURR_TOT",0)
F.Data.DataView.SetFilter("dtARAgingAg","dvNullFinder","isnull(S0TO30_TOT, 0) = 0")
F.Data.DataView.SetValue("dtARAgingAg","dvNullFinder",-1,"S0TO30_TOT",0)
F.Data.DataView.SetFilter("dtARAgingAg","dvNullFinder","isnull(S31TO60_TOT, 0) = 0")
F.Data.DataView.SetValue("dtARAgingAg","dvNullFinder",-1,"S31TO60_TOT",0)
F.Data.DataView.SetFilter("dtARAgingAg","dvNullFinder","isnull(S61TO90_TOT, 0) = 0")
F.Data.DataView.SetValue("dtARAgingAg","dvNullFinder",-1,"S61TO90_TOT",0)
F.Data.DataView.SetFilter("dtARAgingAg","dvNullFinder","isnull(S91ANDUP_TOT, 0) = 0")
F.Data.DataView.SetValue("dtARAgingAg","dvNullFinder",-1,"S91ANDUP_TOT",0)
F.Data.DataView.Close("dtARAgingAg","dvNullFinder")
' Replace Nulls in aggregate table with 0's

'-------------------------------------
F.Data.DataView.Create("dtARAging","dvNullDates")
F.Data.DataView.SetFilter("dtARAging","dvNullDates","DATE_INVOICE = #1/1/1900#")
F.Data.DataView.SetValue("dtARAging","dvNullDates",-1,"DATE_INVOICE",V.Ambient.DBNull)
F.Data.DataView.Close("dtARAging","dvNullDates")
' set 1/1/1900 dates to null

'-------------------------------------
F.Data.DataView.Create("dtARAging","dvChild")
F.Data.DataView.ToDataTable("dtARAging","dvChild","dtARAgingAg$dtARAging")
F.Data.DataTable.Close("dtARAging")
' convert AR table into a child table

'-------------------------------------
F.Data.DataTable.AddRelation("dtARAgingAg","CUSTOMER","dtARAgingAg$dtARAging","CUSTOMER","ARAgingData")
F.Data.DataView.Create("dtARAgingAg$dtARAging","dvARData")
' add relation between aggregate table and child table then create a dataview to be used on the grid

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetARAgingDataTable.End

Program.Sub.SetupARGrid.Start
F.Intrinsic.Control.Try

'-------------------------------------
Gui.F_Main.gsgcAR.AddGridviewFromDataTable("gvARTot","dtARAgingAg")
Gui.F_Main.gsgcAR.AddGridviewFromDataView("gvAR","dtARAgingAg","dvARData")
' add aggregate and child tables as views to grid

'-------------------------------------
Gui.F_Main.gsgcAR.SetGridviewProperty("gvARTot","Editable",False)
Gui.F_Main.gsgcAR.SetGridviewProperty("gvARTot","ReadOnly",True)
Gui.F_Main.gsgcAR.SetGridviewProperty("gvARTot","OptionsViewColumnAutoWidth",False)
' aggregate view grid properties

'-------------------------------------
Gui.F_Main.gsgcAR.SetGridviewProperty("gvAR","Editable",False)
Gui.F_Main.gsgcAR.SetGridviewProperty("gvAR","ReadOnly",True)
Gui.F_Main.gsgcAR.SetGridviewProperty("gvAR","OptionsViewColumnAutoWidth",False)
' child view grid properties

'-------------------------------------
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_CODE","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","YEAR_INVOICE","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","MONTH_INVOICE","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DAY_INVOICE","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","ABS_AMT","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","REFERENCE","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DATE_INVOICE_STR","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DUE_RANK","Visible",False)
' invisible fields on child view

'-------------------------------------
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUSTOMER","Caption","Cust No.*")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","CUSTOMER","Caption","Cust No.*")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","CUSTOMER","Visible",False)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUST_NAME","Caption","Customer")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","Caption","Current")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","Caption","1 to 30")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","Caption","31 to 60")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","Caption","61 to 90")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","Caption","90 +")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","Caption","Total")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","INVOICE","Caption","Invoice")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_NUM","Caption","Batch")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_LINE","Caption","Batch Line")
F.Intrinsic.Control.If(V.Screen.F_Main!optARInvDate.Value)
	Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DATE_INVOICE","Caption","Invoice Date")
F.Intrinsic.Control.Else
	Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DATE_INVOICE","Caption","Invoice Due Date")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_INVOICE","Caption","Amount")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_REM","Caption","Amount Rem.")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","GL_ACCOUNT","Caption","GL Acct.")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","TYPE","Caption","Type")
' captions on both views and make redundant fields on child table 

'-------------------------------------
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUSTOMER","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUST_NAME","Width",150)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","INVOICE","Width",70)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_NUM","Width",62)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_LINE","Width",84)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DATE_INVOICE","Width",120)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_INVOICE","Width",90)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_REM","Width",90)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","GL_ACCOUNT","Width",75)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","TYPE","Width",80)
' widths

'-------------------------------------
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUSTOMER","HeaderHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUST_NAME","HeaderHAlignment","Near")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","INVOICE","HeaderHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_NUM","HeaderHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_LINE","HeaderHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DATE_INVOICE","HeaderHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_INVOICE","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_REM","HeaderHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","GL_ACCOUNT","HeaderHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","TYPE","HeaderHAlignment","Center")
' header horizontal alignments

'-------------------------------------
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUSTOMER","CellHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUST_NAME","CellHAlignment","Near")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","INVOICE","CellHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_NUM","CellHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","BATCH_LINE","CellHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DATE_INVOICE","CellHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_INVOICE","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_REM","CellHAlignment","Far")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","GL_ACCOUNT","CellHAlignment","Center")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","TYPE","CellHAlignment","Center")
' cell horizontal alignments

'-------------------------------------
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUSTOMER","IsHyperlink",True)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUSTOMER","ToolTip","*Double-click to open")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","CUSTOMER","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","CUSTOMER","IsHyperlink",True)
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","CUSTOMER","ToolTip","*Double-click to open")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","CUSTOMER","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
' clickable fields

'-------------------------------------
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_INVOICE","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_INVOICE","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_INVOICE","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_REM","EditMaskType","Numeric")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_REM","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","AMT_REM","EditMaskAsDisplayFormat",True)
' set number formats

'-------------------------------------
Gui.F_Main.gsgcAR.AddSummaryItem("gvARTot","SCURR_TOT","CurrentTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.AddSummaryItem("gvARTot","S0TO30_TOT","ZeroToThirtyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.AddSummaryItem("gvARTot","S31TO60_TOT","ThirtyToSixtyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.AddSummaryItem("gvARTot","S61TO90_TOT","SixtyToNinetyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.AddSummaryItem("gvARTot","S91ANDUP_TOT","NinetyPlusTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAR.AddSummaryItem("gvARTot","AGE_TOT","TotalTotal","Sum","Total: ",,"$ #,###,###,##0.00")
' add sum totals to bottom of grid

'-------------------------------------
Gui.F_Main.gsgcAR.SetColumnProperty("gvAR","DATE_INVOICE","DisplayCustomDateTime","d")
' set date format

Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorPurple.Plus)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","SCURR_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorBlue.Plus)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S0TO30_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorGreen.Plus)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S31TO60_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorYellow.Plus)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S61TO90_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorRed.Plus)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","S91ANDUP_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAR.SetColumnProperty("gvARTot","AGE_TOT","HeaderFontBold",True)

'-------------------------------------
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvARTot","SCURR_TOT","SCURRRANK","NotEqual",0)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvAR","DUE_RANK","SCURRDATA","Equal",V.Global.sCurrent)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvARTot","SCURR_TOT","SCURRRANK","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","SCURRDATA","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","SCURRDATA","ApplyToRow",True)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvARTot","S0TO30_TOT","S0TO30RANK","NotEqual",0)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvAR","DUE_RANK","S0TO30DATA","Equal",V.Global.s0to30)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvARTot","S0TO30_TOT","S0TO30RANK","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S0TO30DATA","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S0TO30DATA","ApplyToRow",True)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvARTot","S31TO60_TOT","S31TO60RANK","NotEqual",0)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvAR","DUE_RANK","S31TO60DATA","Equal",V.Global.s31to60)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvARTot","S31TO60_TOT","S31TO60RANK","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S31TO60DATA","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S31TO60DATA","ApplyToRow",True)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvARTot","S61TO90_TOT","S61TO90RANK","NotEqual",0)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvAR","DUE_RANK","S61TO90DATA","Equal",V.Global.s61to90)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvARTot","S61TO90_TOT","S61TO90RANK","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S61TO90DATA","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S61TO90DATA","ApplyToRow",True)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvARTot","S91ANDUP_TOT","S91ANDUPRANK","NotEqual",0)
Gui.F_Main.gsgcAR.AddStyleFormatCondition("gvAR","DUE_RANK","S91ANDUPDATA","Equal",V.Global.s91andUp)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvARTot","S91ANDUP_TOT","S91ANDUPRANK","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S91ANDUPDATA","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcAR.SetStyleFormatConditionProperty("gvAR","DUE_RANK","S91ANDUPDATA","ApplyToRow",True)
' set cell background colors for each category in the aggregate view to coress reference against the child view 

'-------------------------------------
Gui.F_Main.gsgcAR.MainView("gvARTot")
' view grid

Gui.F_Main.gsgcAR.TabStop(True)
Gui.F_Main.gsgcAR.TabIndex(4)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SetupARGrid.End

Program.Sub.SerializeAR.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVARTOT
Gui.F_Main.gsgcAR.Serialize("gvARTot",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVARTOT",5784,2000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

'GridView - GVAR
Gui.F_Main.gsgcAR.Serialize("gvAR",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVAR",5784,10000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SerializeAR.End

Program.Sub.DeserializeAR.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVARTOT
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVARTOT",5784,2000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcAR.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

'GridView - GVAR
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVAR",5784,10000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcAR.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.DeserializeAR.End

Program.Sub.GetAPAgingDataTable.Start
V.Local.sSQL.Declare
V.Local.sFilter.Declare
V.Local.sExpression.Declare
V.Local.d30.Declare
V.Local.d31.Declare
V.Local.d60.Declare
V.Local.d61.Declare
V.Local.d90.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Date.DateAdd("d",-30,V.Ambient.Date,V.Local.d30)
F.Intrinsic.Date.DateAdd("d",-31,V.Ambient.Date,V.Local.d31)
F.Intrinsic.Date.DateAdd("d",-60,V.Ambient.Date,V.Local.d60)
F.Intrinsic.Date.DateAdd("d",-61,V.Ambient.Date,V.Local.d61)
F.Intrinsic.Date.DateAdd("d",-90,V.Ambient.Date,V.Local.d90)
' set dates for grouping data into categories

'-------------------------------------
F.Intrinsic.Control.If(V.Screen.F_Main!optAPInvDate.Value)
	F.Intrinsic.String.Build("select rtrim(UCASE(VENDOR)) as VENDOR, rtrim(INVOICE) as INVOICE, rtrim(BATCH_NUM) as BATCH_NUM, rtrim(BATCH_LINE) as BATCH_LINE, BATCH_CODE, DATE_INVOICE, cast(year(DATE_INVOICE) as char(4)) as YEAR_INVOICE, if(month(DATE_INVOICE) < 10, '0', '') + cast(month(DATE_INVOICE) as char(2)) as MONTH_INVOICE, if(day(DATE_INVOICE) < 10, '0', '') + cast(day(DATE_INVOICE) as char(2)) as DAY_INVOICE, if(BATCH_CODE in ('11', '12'), -AMT_TRANSACTION, AMT_TRANSACTION) as AMT_INVOICE, AMT_TRANSACTION as ABS_AMT, rtrim(GL_ACCOUNT) as GL_ACCOUNT, rtrim(PURCHASE_ORDER) as PURCHASE_ORDER from V_AP_OPEN_ITEMS where VENDOR <> '';",V.Ambient.Date.PervasiveDate,V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select rtrim(UCASE(VENDOR)) as VENDOR, rtrim(INVOICE) as INVOICE, rtrim(BATCH_NUM) as BATCH_NUM, BATCH_LINE, BATCH_CODE, DATE_INVOICE_DUE as DATE_INVOICE, cast(year(DATE_INVOICE_DUE) as char(4)) as YEAR_INVOICE, if(month(DATE_INVOICE_DUE) < 10, '0', '') + cast(month(DATE_INVOICE_DUE) as char(2)) as MONTH_INVOICE, if(day(DATE_INVOICE_DUE) < 10, '0', '') + cast(day(DATE_INVOICE_DUE) as char(2)) as DAY_INVOICE, if(BATCH_CODE in ('11', '12'), -AMT_TRANSACTION, AMT_TRANSACTION) as AMT_INVOICE, AMT_TRANSACTION as ABS_AMT, rtrim(GL_ACCOUNT) as GL_ACCOUNT, rtrim(PURCHASE_ORDER) as PURCHASE_ORDER from V_AP_OPEN_ITEMS where VENDOR <> '';",V.Ambient.Date.PervasiveDate,V.Local.sSQL)
F.Intrinsic.Control.EndIf
' build sql based on radio button options

F.Intrinsic.Control.If(V.Args.Debug)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf

'-------------------------------------
F.ODBC.Connection!con.OpenCompanyConnection
F.Data.DataTable.CreateFromSQL("dtAPAging","con",V.Local.sSQL,True)
F.Data.DataView.Create("dtAPAging","dvTest",22,"VENDOR = 'AAA001'","DATE_INVOICE asc")
F.Data.DataTable.CreateFromSQL("dtVendors","con","select distinct rtrim(UCASE(VENDOR)) as VENDOR, rtrim(NAME_VENDOR) as VEND_NAME from V_VENDOR_MASTER;",False)
F.ODBC.Connection!con.Close
' create data sets

'-------------------------------------
F.Data.DataTable.AddExpressionColumn("dtAPAging","TYPE","String","IIF(BATCH_CODE = '09', 'Accrual', IIF(BATCH_CODE = '10', 'Invoice', IIF(BATCH_CODE = '11', 'Cash', IIF(BATCH_CODE = '12', 'Credit Memo', IIF(BATCH_CODE = '13', 'Adjustment', IIF(BATCH_CODE = '15', 'Fin. Charge', BATCH_CODE))))))")
' convert BATCH_CODE numbers to readable descriptions for end user

'-------------------------------------
F.Data.DataTable.AddExpressionColumn("dtAPAging","DATE_INVOICE_STR","String","TRIM(YEAR_INVOICE) + TRIM(MONTH_INVOICE) + TRIM(DAY_INVOICE)")
F.Intrinsic.String.Build("IIF(BATCH_CODE = '09', '{11}', IIF(DATE_INVOICE_STR >= '{0}', '{10}', IIF(DATE_INVOICE_STR < '{0}' and DATE_INVOICE_STR >= '{1}', '{6}', IIF(DATE_INVOICE_STR <= '{2}' and DATE_INVOICE_STR >= '{3}', '{7}', IIF(DATE_INVOICE_STR <= '{4}' and DATE_INVOICE_STR >= '{5}', '{8}', '{9}')))))",V.Ambient.Date.FormatYYYYMMDD,V.Local.d30.FormatYYYYMMDD,V.Local.d31.FormatYYYYMMDD,V.Local.d60.FormatYYYYMMDD,V.Local.d61.FormatYYYYMMDD,V.Local.d90.FormatYYYYMMDD,V.Global.s0to30,V.Global.s31to60,V.Global.s61to90,V.Global.s91andUp,V.Global.sCurrent,V.Global.sNotAged,V.Local.sExpression)
F.Data.DataTable.AddExpressionColumn("dtAPAging","DUE_RANK","String",V.Local.sExpression)
' categorize each data row by date

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Coalescing AP invoices to calculate their aged totals")
F.Data.DataView.Create("dtAPAging","dvLowerMemoryUsage")
F.Data.DataView.SetFilter("dtAPAging","dvLowerMemoryUsage","INVOICE = '-1'")
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtAPAging*!*OPEN",V.Enum.LinqSourceType!DataView,"dtAPAging","dvLowerMemoryUsage*!*OPEN2","OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.VENDOR*!*OPEN.INVOICE*!*SUM(OPEN.AMT_INVOICE) as INVOICE_TOT",,"OPEN.VENDOR,OPEN.INVOICE",,"dtInvoiceTots",False)
' coalesce the records by vendor and invoice to get invoice totals

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Removing AP invoices that have been paid")
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtAPAging*!*OPEN",V.Enum.LinqSourceType!DataTable,"dtInvoiceTots*!*INVOICE","OPEN.VENDOR = INVOICE.VENDOR and OPEN.INVOICE = INVOICE.INVOICE","OPEN.VENDOR*!*OPEN.INVOICE*!*OPEN.BATCH_NUM*!*OPEN.BATCH_LINE*!*OPEN.BATCH_CODE*!*OPEN.DATE_INVOICE*!*OPEN.YEAR_INVOICE*!*OPEN.MONTH_INVOICE*!*OPEN.DAY_INVOICE*!*OPEN.AMT_INVOICE*!*OPEN.ABS_AMT*!*INVOICE.INVOICE_TOT as AMT_REM*!*OPEN.GL_ACCOUNT","INVOICE.INVOICE_TOT >= 0.01 or INVOICE.INVOICE_TOT <= -0.01",,,"dtAPAgingNoZero",True)
F.Data.DataTable.DeleteRow("dtAPAging")
F.Data.DataTable.AcceptChanges("dtAPAging")
F.Data.DataTable.AddColumn("dtAPAging","AMT_REM","Float")
F.Data.DataTable.Merge("dtAPAgingNoZero","dtAPAging",True,2)
F.Data.DataTable.Close("dtAPAgingNoZero")
' parse AR Aging to remove the invoices that total to 0

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Coalescing AP data into their date ranges")
F.Data.DataView.Create("dtAPAging","dvCurrent")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.sCurrent,V.Local.sFilter)
F.Data.DataView.SetFilter("dtAPAging","dvCurrent",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtAPAging","dvCurrent*!*OPEN",V.Enum.LinqSourceType!DataView,"dtAPAging","dvCurrent*!*OPEN2","OPEN.VENDOR = OPEN2.VENDOR and OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.VENDOR*!*SUM(OPEN.AMT_INVOICE) as SCURR_TOT",,"OPEN.VENDOR",,"dtVendCurrAg",False)
F.Data.DataView.Close("dtAPAging","dvCurrent")
F.Data.DataView.Create("dtAPAging","dv0to30")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s0to30,V.Local.sFilter)
F.Data.DataView.SetFilter("dtAPAging","dv0to30",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtAPAging","dv0to30*!*OPEN",V.Enum.LinqSourceType!DataView,"dtAPAging","dv0to30*!*OPEN2","OPEN.VENDOR = OPEN2.VENDOR and OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.VENDOR*!*SUM(OPEN.AMT_INVOICE) as S0TO30_TOT",,"OPEN.VENDOR",,"dtVend0to30Ag",False)
F.Data.DataView.Close("dtAPAging","dv0to30")
F.Data.DataView.Create("dtAPAging","dv31to60")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s31to60,V.Local.sFilter)
F.Data.DataView.SetFilter("dtAPAging","dv31to60",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtAPAging","dv31to60*!*OPEN",V.Enum.LinqSourceType!DataView,"dtAPAging","dv31to60*!*OPEN2","OPEN.VENDOR = OPEN2.VENDOR and OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.VENDOR*!*SUM(OPEN.AMT_INVOICE) as S31TO60_TOT",,"OPEN.VENDOR",,"dtVend31to60Ag",False)
F.Data.DataView.Close("dtAPAging","dv31to60")
F.Data.DataView.Create("dtAPAging","dv61to90")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s61to90,V.Local.sFilter)
F.Data.DataView.SetFilter("dtAPAging","dv61to90",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtAPAging","dv61to90*!*OPEN",V.Enum.LinqSourceType!DataView,"dtAPAging","dv61to90*!*OPEN2","OPEN.VENDOR = OPEN2.VENDOR and OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.VENDOR*!*SUM(OPEN.AMT_INVOICE) as S61TO90_TOT",,"OPEN.VENDOR",,"dtVend61to90Ag",False)
F.Data.DataView.Close("dtAPAging","dv61to90")
F.Data.DataView.Create("dtAPAging","dv91plus")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.s91andUp,V.Local.sFilter)
F.Data.DataView.SetFilter("dtAPAging","dv91plus",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtAPAging","dv91plus*!*OPEN",V.Enum.LinqSourceType!DataView,"dtAPAging","dv91plus*!*OPEN2","OPEN.VENDOR = OPEN2.VENDOR and OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.VENDOR*!*SUM(OPEN.AMT_INVOICE) as S91ANDUP_TOT",,"OPEN.VENDOR",,"dtVend91andUpAg",False)
F.Data.DataView.Close("dtAPAging","dv91plus")
F.Data.DataView.Create("dtAPAging","dvNotAged")
F.Intrinsic.String.Build("DUE_RANK = '{0}'",V.Global.sNotAged,V.Local.sFilter)
F.Data.DataView.SetFilter("dtAPAging","dvNotAged",V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataView,"dtAPAging","dvNotAged*!*OPEN",V.Enum.LinqSourceType!DataView,"dtAPAging","dvNotAged*!*OPEN2","OPEN.VENDOR = OPEN2.VENDOR and OPEN.BATCH_NUM = OPEN2.BATCH_NUM and OPEN.BATCH_LINE = OPEN2.BATCH_LINE","OPEN.VENDOR*!*SUM(OPEN.AMT_INVOICE) as SNOTAGED_TOT",,"OPEN.VENDOR",,"dtVendNotAgedAg",False)
F.Data.DataView.Close("dtAPAging","dvNotAged")
' calculate aggregate totals for each group by vendor

'-------------------------------------
F.Data.DataTable.Create("dtVendList",False)
F.Data.DataTable.AddColumn("dtVendList","VENDOR","String")
F.Data.DataTable.Merge("dtVendCurrAg","dtVendList",True,2)
F.Data.DataTable.Merge("dtVend0to30Ag","dtVendList",True,2)
F.Data.DataTable.Merge("dtVend31to60Ag","dtVendList",True,2)
F.Data.DataTable.Merge("dtVend61to90Ag","dtVendList",True,2)
F.Data.DataTable.Merge("dtVend91andUpAg","dtVendList",True,2)
F.Data.DataTable.Merge("dtVendNotAgedAg","dtVendList",True,2)
F.Data.DataView.Create("dtVendList","dvDistinct")
F.Data.DataView.SetSort("dtVendList","dvDistinct","VENDOR desc")
F.Data.DataView.ToDataTableDistinct("dtVendList","dvDistinct","dtVendListDist","VENDOR")
F.Data.DataTable.Close("dtVendList")
' Get list of vendors that have data

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Combining coalesced AP into one data set")
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtVendListDist*!*VENDLIST",V.Enum.LinqSourceType!DataTable,"dtVendors*!*VEND","VENDLIST.VENDOR = VEND.VENDOR",V.Enum.LinqSourceType!DataTable,"dtVendCurrAg*!*CURR","VEND.VENDOR = CURR.VENDOR",V.Enum.LinqSourceType!DataTable,"dtVend0to30Ag*!*ZERO","VEND.VENDOR = ZERO.VENDOR",V.Enum.LinqSourceType!DataTable,"dtVend31to60Ag*!*THIRTY","VEND.VENDOR = THIRTY.VENDOR",V.Enum.LinqSourceType!DataTable,"dtVend61to90Ag*!*SIXTY","VEND.VENDOR = SIXTY.VENDOR",V.Enum.LinqSourceType!DataTable,"dtVend91andUpAg*!*NINETY","VEND.VENDOR = NINETY.VENDOR",V.Enum.LinqSourceType!DataTable,"dtVendNotAgedAg*!*NOTAGED","VEND.VENDOR = NOTAGED.VENDOR","VEND.VENDOR*!*VEND.VEND_NAME*!*CURR.SCURR_TOT*!*ZERO.S0TO30_TOT*!*THIRTY.S31TO60_TOT*!*SIXTY.S61TO90_TOT*!*NINETY.S91ANDUP_TOT*!*NOTAGED.SNOTAGED_TOT",,,"VEND.VENDOR","dtAPAgingAg",True)
F.Data.DataTable.Close("dtVendListDist")
F.Data.DataTable.Close("dtVendors")
F.Data.DataTable.Close("dtVendCurrAg")
F.Data.DataTable.Close("dtVend0to30Ag")
F.Data.DataTable.Close("dtVend31to60Ag")
F.Data.DataTable.Close("dtVend61to90Ag")
F.Data.DataTable.Close("dtVend91andUpAg")
F.Data.DataTable.Close("dtVendNotAgedAg")
' combine coalesced data into one dataset

'-------------------------------------
Gui.F_Main.progressPanelCashFlow.Detail("Calculating AP data totals for all vendors")
F.Data.DataTable.AddExpressionColumn("dtAPAgingAg","AGE_TOT","Float","ISNULL(SCURR_TOT, 0) + ISNULL(S0TO30_TOT, 0) + ISNULL(S31TO60_TOT, 0) + ISNULL(S61TO90_TOT, 0) + ISNULL(S91ANDUP_TOT, 0) + ISNULL(SNOTAGED_TOT, 0)")
' calcualte total for each vendor

'-------------------------------------
F.Data.DataView.Create("dtAPAgingAg","dvNullFinder")
F.Data.DataView.SetFilter("dtAPAgingAg","dvNullFinder","isnull(SCURR_TOT, 0) = 0")
F.Data.DataView.SetValue("dtAPAgingAg","dvNullFinder",-1,"SCURR_TOT",0)
F.Data.DataView.SetFilter("dtAPAgingAg","dvNullFinder","isnull(S0TO30_TOT, 0) = 0")
F.Data.DataView.SetValue("dtAPAgingAg","dvNullFinder",-1,"S0TO30_TOT",0)
F.Data.DataView.SetFilter("dtAPAgingAg","dvNullFinder","isnull(S31TO60_TOT, 0) = 0")
F.Data.DataView.SetValue("dtAPAgingAg","dvNullFinder",-1,"S31TO60_TOT",0)
F.Data.DataView.SetFilter("dtAPAgingAg","dvNullFinder","isnull(S61TO90_TOT, 0) = 0")
F.Data.DataView.SetValue("dtAPAgingAg","dvNullFinder",-1,"S61TO90_TOT",0)
F.Data.DataView.SetFilter("dtAPAgingAg","dvNullFinder","isnull(S91ANDUP_TOT, 0) = 0")
F.Data.DataView.SetValue("dtAPAgingAg","dvNullFinder",-1,"S91ANDUP_TOT",0)
F.Data.DataView.SetFilter("dtAPAgingAg","dvNullFinder","isnull(SNOTAGED_TOT, 0) = 0")
F.Data.DataView.SetValue("dtAPAgingAg","dvNullFinder",-1,"SNOTAGED_TOT",0)
F.Data.DataView.Close("dtAPAgingAg","dvNullFinder")
' Replace Nulls in aggregate table with 0's

'-------------------------------------
F.Data.DataView.Create("dtAPAging","dvChild")
F.Data.DataView.ToDataTable("dtAPAging","dvChild","dtAPAgingAg$dtAPAging")
F.Data.DataTable.Close("dtAPAging")
' convert AP table into child table

'-------------------------------------
F.Data.DataTable.AddRelation("dtAPAgingAg","VENDOR","dtAPAgingAg$dtAPAging","VENDOR","APAgingData")
F.Data.DataView.Create("dtAPAgingAg$dtAPAging","dvAPData")
' add relation between aggregate table and child table and create a child dataview to add to grid

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetAPAgingDataTable.End

Program.Sub.SetupAPGrid.Start
F.Intrinsic.Control.Try

'-------------------------------------
Gui.F_Main.gsgcAP.AddGridviewFromDataTable("gvAPTot","dtAPAgingAg")
Gui.F_Main.gsgcAP.AddGridviewFromDataView("gvAP","dtAPAgingAg","dvAPData")
' add aggregate table and child view to grid 

'-------------------------------------
Gui.F_Main.gsgcAP.SetGridviewProperty("gvAPTot","Editable",False)
Gui.F_Main.gsgcAP.SetGridviewProperty("gvAPTot","ReadOnly",True)
Gui.F_Main.gsgcAP.SetGridviewProperty("gvAPTot","OptionsViewColumnAutoWidth",False)
' set aggregate gv grid properties

'-------------------------------------
Gui.F_Main.gsgcAP.SetGridviewProperty("gvAP","Editable",False)
Gui.F_Main.gsgcAP.SetGridviewProperty("gvAP","ReadOnly",True)
Gui.F_Main.gsgcAP.SetGridviewProperty("gvAP","OptionsViewColumnAutoWidth",False)
' set child gv grid properties

'-------------------------------------
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_CODE","Visible",False)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","YEAR_INVOICE","Visible",False)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","MONTH_INVOICE","Visible",False)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DAY_INVOICE","Visible",False)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","ABS_AMT","Visible",False)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DATE_INVOICE_STR","Visible",False)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DUE_RANK","Visible",False)
' set invisible fields

'-------------------------------------
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VENDOR","Caption","Vend No.*")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","Caption","Vend No.*")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","Visible",False)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VEND_NAME","Caption","Vendor")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","Caption","Current")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","Caption","1 to 30")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","Caption","31 to 60")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","Caption","61 to 90")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","Caption","90 +")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","Caption","Not Aged/Accrual")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","Caption","Total")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","INVOICE","Caption","Invoice")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_NUM","Caption","Batch")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_LINE","Caption","Batch Line")
F.Intrinsic.Control.If(V.Screen.F_Main!optAPInvDate.Value)
	Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DATE_INVOICE","Caption","Invoice Date")
F.Intrinsic.Control.Else
	Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DATE_INVOICE","Caption","Invoice Due Date")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_INVOICE","Caption","Amount")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_REM","Caption","Amount Rem.")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","GL_ACCOUNT","Caption","GL Acct.")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","PURCHASE_ORDER","Caption","PO No.*")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","TYPE","Caption","Type")
' set captions on both gvs and make redundant fields on child gv invisible

'-------------------------------------
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VENDOR","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VEND_NAME","Width",150)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","Width",85)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","INVOICE","Width",70)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_NUM","Width",62)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_LINE","Width",84)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DATE_INVOICE","Width",120)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_INVOICE","Width",90)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_REM","Width",90)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","GL_ACCOUNT","Width",75)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","PURCHASE_ORDER","Width",80)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","TYPE","Width",80)
' widths

'-------------------------------------
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VENDOR","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VEND_NAME","HeaderHAlignment","Near")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","INVOICE","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_NUM","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_LINE","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DATE_INVOICE","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_INVOICE","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_REM","HeaderHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","GL_ACCOUNT","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","PURCHASE_ORDER","HeaderHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","TYPE","HeaderHAlignment","Center")
' header horizontal alignments

'-------------------------------------
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VENDOR","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VEND_NAME","CellHAlignment","Near")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","INVOICE","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_NUM","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","BATCH_LINE","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DATE_INVOICE","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_INVOICE","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_REM","CellHAlignment","Far")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","GL_ACCOUNT","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","PURCHASE_ORDER","CellHAlignment","Center")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","TYPE","CellHAlignment","Center")
' cell horizontal alignments

'-------------------------------------
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VENDOR","IsHyperlink",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VENDOR","ToolTip","*Double-click to open")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","VENDOR","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","IsHyperlink",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","ToolTip","*Double-click to open")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","VENDOR","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","PURCHASE_ORDER","IsHyperlink",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","PURCHASE_ORDER","ToolTip","*Double-click to open")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","PURCHASE_ORDER","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
' clickable fields

'-------------------------------------
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_INVOICE","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_INVOICE","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_INVOICE","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_REM","EditMaskType","Numeric")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_REM","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","AMT_REM","EditMaskAsDisplayFormat",True)
' set number formats

'-------------------------------------
Gui.F_Main.gsgcAP.AddSummaryItem("gvAPTot","SCURR_TOT","CurrTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.AddSummaryItem("gvAPTot","S0TO30_TOT","ZeroToThirtyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.AddSummaryItem("gvAPTot","S31TO60_TOT","ThirtyToSixtyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.AddSummaryItem("gvAPTot","S61TO90_TOT","SixtyToNinetyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.AddSummaryItem("gvAPTot","S91ANDUP_TOT","NinetyPlusTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.AddSummaryItem("gvAPTot","SNOTAGED_TOT","NinetyPlusTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcAP.AddSummaryItem("gvAPTot","AGE_TOT","TotalTotal","Sum","Total: ",,"$ #,###,###,##0.00")
' add sum totals to bottom on grid

'-------------------------------------
Gui.F_Main.gsgcAP.SetColumnProperty("gvAP","DATE_INVOICE","DisplayCustomDateTime","d")
' set date formats

Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorPurple.Plus)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SCURR_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorBlue.Plus)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S0TO30_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorGreen.Plus)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S31TO60_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorYellow.Plus)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S61TO90_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorRed.Plus)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","S91ANDUP_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorBlack.Plus)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","SNOTAGED_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcAP.SetColumnProperty("gvAPTot","AGE_TOT","HeaderFontBold",True)

'-------------------------------------
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAPTot","SCURR_TOT","SCURRRANK","NotEqual",0)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAP","DUE_RANK","SCURRDATA","Equal",V.Global.sCurrent)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAPTot","SCURR_TOT","SCURRRANK","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","SCURRDATA","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","SCURRDATA","ApplyToRow",True)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAPTot","S0TO30_TOT","S0TO30RANK","NotEqual",0)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAP","DUE_RANK","S0TO30DATA","Equal",V.Global.s0to30)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAPTot","S0TO30_TOT","S0TO30RANK","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S0TO30DATA","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S0TO30DATA","ApplyToRow",True)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAPTot","S31TO60_TOT","S31TO60RANK","NotEqual",0)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAP","DUE_RANK","S31TO60DATA","Equal",V.Global.s31to60)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAPTot","S31TO60_TOT","S31TO60RANK","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S31TO60DATA","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S31TO60DATA","ApplyToRow",True)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAPTot","S61TO90_TOT","S61TO90RANK","NotEqual",0)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAP","DUE_RANK","S61TO90DATA","Equal",V.Global.s61to90)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAPTot","S61TO90_TOT","S61TO90RANK","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S61TO90DATA","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S61TO90DATA","ApplyToRow",True)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAPTot","S91ANDUP_TOT","S91ANDUPRANK","NotEqual",0)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAP","DUE_RANK","S91ANDUPDATA","Equal",V.Global.s91andUp)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAPTot","S91ANDUP_TOT","S91ANDUPRANK","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S91ANDUPDATA","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","S91ANDUPDATA","ApplyToRow",True)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAPTot","SNOTAGED_TOT","SNOTAGEDRANK","NotEqual",0)
Gui.F_Main.gsgcAP.AddStyleFormatCondition("gvAP","DUE_RANK","SNOTAGEDDATA","Equal",V.Global.sNotAged)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAPTot","SNOTAGED_TOT","SNOTAGEDRANK","BackColor",V.Enum.ThemeColors!ColorBlack.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAPTot","SNOTAGED_TOT","SNOTAGEDRANK","ForeColor",V.Enum.ThemeColors!ColorWhite.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","SNOTAGEDDATA","BackColor",V.Enum.ThemeColors!ColorBlack.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","SNOTAGEDDATA","ForeColor",V.Enum.ThemeColors!ColorWhite.Highlight)
Gui.F_Main.gsgcAP.SetStyleFormatConditionProperty("gvAP","DUE_RANK","SNOTAGEDDATA","ApplyToRow",True)
' add color to aggregate gv and child gv to cross reference the date groups

'-------------------------------------
Gui.F_Main.gsgcAP.MainView("gvAPTot")
' view grid

Gui.F_Main.gsgcAP.TabStop(True)
Gui.F_Main.gsgcAP.TabIndex(5)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SetupAPGrid.End

Program.Sub.SerializeAP.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVAPTOT
Gui.F_Main.gsgcAP.Serialize("gvAPTot",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVAPTOT",5784,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

'GridView - GVAP
Gui.F_Main.gsgcAP.Serialize("gvAP",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVAP",5784,9000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SerializeAP.End

Program.Sub.DeserializeAP.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVAPTOT
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVAPTOT",5784,1000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcAP.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

'GridView - GVAP
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVAP",5784,9000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcAP.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.DeserializeAP.End

Program.Sub.ExportShipping.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcShip")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare
F.Intrinsic.Control.Try

'I reuse this export for all my grids (that i want to have the ability to export)
'so that it can export to excel if the workstation has it installed or it will
'create a CSV file

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"csv")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ExportShipping.End

Program.Sub.cmdOrdersRefresh_Click.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtOrdersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeOrders)
	F.Data.DataTable.Close("dtOrdersAg$dtOrders")
	F.Data.DataTable.Close("dtOrdersAg")
F.Intrinsic.Control.EndIf
' serialize and close order data tables if they exist

Gui.F_Main..Enabled(False)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetOrdersDataTable,"Debug",False)
' returns dtOrdersAg and dtOrdersAg$dtOrders

'-------------------------------------
F.Intrinsic.Control.CallSub(SetupOrdersGrid)
' add data tables to grid

'-------------------------------------
F.Intrinsic.Control.CallSub(DeserializeOrders)
' retrieve previous grid settings for current user if they exist

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdOrdersRefresh_Click.End

Program.Sub.GetOrdersDataTable.Start
V.Local.sSQL.Declare
V.Local.sFilter.Declare
V.Local.sExpression.Declare
V.Local.fBacklogTot.Declare
V.Local.d30.Declare
V.Local.d31.Declare
V.Local.d60.Declare
V.Local.d61.Declare
V.Local.d90.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Date.DateAdd("d",30,V.Ambient.Date,V.Local.d30)
F.Intrinsic.Date.DateAdd("d",31,V.Ambient.Date,V.Local.d31)
F.Intrinsic.Date.DateAdd("d",60,V.Ambient.Date,V.Local.d60)
F.Intrinsic.Date.DateAdd("d",61,V.Ambient.Date,V.Local.d61)
F.Intrinsic.Date.DateAdd("d",90,V.Ambient.Date,V.Local.d90)
' set dates to categorize order lines (or order line ship schedules) by date

'-------------------------------------
'V.Local.sSQL.Set("select rtrim(CUSTOMER) as CUSTOMER, ORDER_NO, left(RECORD_NO, 3) as ORDER_LINE, ITEM_PROMISE_DT as DATE_DUE, 0 as MULT_QTY_SEQ, cast(year(ITEM_PROMISE_DT) as char(4)) as YEAR_DUE, if(month(ITEM_PROMISE_DT) < 10, '0', '') + cast(month(ITEM_PROMISE_DT) as char(2)) as MONTH_DUE, if(day(ITEM_PROMISE_DT) < 10, '0', '') + cast(day(ITEM_PROMISE_DT) as char(2)) as DAY_DUE, ")
V.Local.sSQL.Set("select rtrim(CUSTOMER) as CUSTOMER, ORDER_NO, left(RECORD_NO, 3) as ORDER_LINE, DATE_ITEM_PROM as DATE_DUE, 0 as MULT_QTY_SEQ, cast(year(DATE_ITEM_PROM) as char(4)) as YEAR_DUE, if(month(DATE_ITEM_PROM) < 10, '0', '') + cast(month(DATE_ITEM_PROM) as char(2)) as MONTH_DUE, if(day(DATE_ITEM_PROM) < 10, '0', '') + cast(day(DATE_ITEM_PROM) as char(2)) as DAY_DUE, ")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	F.Intrinsic.String.Build("{0}rtrim(left(PART, 17)) as PART_NUM, rtrim(right(PART, 3)) as REV, ",V.Local.sSQL,V.Local.sSQL)
F.Intrinsic.Control.Else
	'Rev is not in use
	F.Intrinsic.String.Build("{0}rtrim(PART) as PART, ",V.Local.sSQL,V.Local.sSQL)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}LOCATION as LOC, UM_ORDER, QTY_ORDERED, QTY_BO, DISCOUNT_PRICE AS PRICE, COST, AMT_DISCOUNT from V_ORDER_LINES where QTY_BO > 0 and CUSTOMER <> '' order by ORDER_NO, RECORD_NO;",V.Local.sSQL,V.Local.sSQL)
' build order lines SQL based on the PartRev option

F.Intrinsic.Control.If(V.Args.Debug)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf

'-------------------------------------
F.ODBC.Connection!con.OpenCompanyConnection
F.Data.DataTable.CreateFromSQL("dtCustomers","con","select rtrim(CUSTOMER) as CUSTOMER, rtrim(NAME_CUSTOMER) as CUST_NAME from V_CUSTOMER_MASTER;",False)
F.Intrinsic.Control.If(V.Screen.F_Main!optItemProm.Value)
	'Not populating based on ship schedule dates
	F.Data.DataTable.CreateFromSQL("dtOrders","con",V.Local.sSQL,True)
	F.ODBC.Connection!con.Close
F.Intrinsic.Control.Else
	'Populating based on ship schedule dates
	F.Data.DataTable.CreateFromSQL("dtOrderLines","con",V.Local.sSQL,False)
	F.Data.DataTable.CreateFromSQL("dtOrderShipSchedule","con","select ORDER_NO, left(ORDER_LINE, 3) as ORDER_LINE, DATE_DUE, MULT_QTY_SEQ, cast(year(DATE_DUE) as char(4)) as YEAR_DUE, if(month(DATE_DUE) < 10, '0', '') + cast(month(DATE_DUE) as char(2)) as MONTH_DUE, if(day(DATE_DUE) < 10, '0', '') + cast(day(DATE_DUE) as char(2)) as DAY_DUE, QTY_SCHED, QTY_OPEN from V_OE_SHIP_SCHED where QTY_OPEN > 0 and FLAG_CLOSED <> 'Y';",False)
	F.ODBC.Connection!con.Close
	
	F.Data.DataView.Create("dtOrderShipSchedule","dvScheduled")
	F.Data.DataView.SetFilter("dtOrderShipSchedule","dvScheduled","DATE_DUE <> #1/1/1900#")
	F.Intrinsic.Control.If(V.Global.bUseRev)
		'Rev is in use
		F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataView,"dtOrderShipSchedule","dvScheduled*!*SCHED",V.Enum.LinqSourceType!DataTable,"dtOrderLines*!*LINES","SCHED.ORDER_NO = LINES.ORDER_NO and SCHED.ORDER_LINE = LINES.ORDER_LINE","LINES.CUSTOMER*!*LINES.ORDER_NO*!*LINES.ORDER_LINE*!*SCHED.DATE_DUE*!*SCHED.MULT_QTY_SEQ*!*SCHED.YEAR_DUE*!*SCHED.MONTH_DUE*!*SCHED.DAY_DUE*!*LINES.PART_NUM*!*LINES.REV*!*LINES.LOC*!*LINES.UM_ORDER*!*SCHED.QTY_SCHED as QTY_ORDERED*!*SCHED.QTY_OPEN as QTY_BO*!*LINES.PRICE*!*LINES.COST*!*LINES.AMT_DISCOUNT",,,"SCHED.ORDER_NO asc,SCHED.ORDER_LINE asc,SCHED.DATE_DUE asc","dtOrders",True)
	F.Intrinsic.Control.Else
		'Rev is not in use
		F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataView,"dtOrderShipSchedule","dvScheduled*!*SCHED",V.Enum.LinqSourceType!DataTable,"dtOrderLines*!*LINES","SCHED.ORDER_NO = LINES.ORDER_NO and SCHED.ORDER_LINE = LINES.ORDER_LINE","LINES.CUSTOMER*!*LINES.ORDER_NO*!*LINES.ORDER_LINE*!*SCHED.DATE_DUE*!*SCHED.MULT_QTY_SEQ*!*SCHED.YEAR_DUE*!*SCHED.MONTH_DUE*!*SCHED.DAY_DUE*!*LINES.PART*!*LINES.LOC*!*LINES.UM_ORDER*!*SCHED.QTY_SCHED as QTY_ORDERED*!*SCHED.QTY_OPEN as QTY_BO*!*LINES.PRICE*!*LINES.COST*!*LINES.AMT_DISCOUNT",,,"SCHED.ORDER_NO asc,SCHED.ORDER_LINE asc,SCHED.DATE_DUE asc","dtOrders",True)
	F.Intrinsic.Control.EndIf
	F.Data.DataView.Close("dtOrderShipSchedule","dvScheduled")
	
	F.Data.DataTable.AddColumn("dtOrders","SHIP_SCHED","Boolean",False)
	F.Data.DataTable.SetValue("dtOrders",-1,"SHIP_SCHED",True)
	
	'-------------------------------------
	F.Data.DataView.Create("dtOrderShipSchedule","dvNotScheduled")
	F.Data.DataView.SetFilter("dtOrderShipSchedule","dvNotScheduled","DATE_DUE = #1/1/1900#")
	F.Intrinsic.Control.If(V.DataView.dtOrderShipSchedule!dvNotScheduled.RowCount,>,0)
		F.Intrinsic.Control.If(V.Global.bUseRev)
			'Rev is in use
			F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataView,"dtOrderShipSchedule","dvNotScheduled*!*SCHED",V.Enum.LinqSourceType!DataTable,"dtOrderLines*!*LINES","SCHED.ORDER_NO = LINES.ORDER_NO and SCHED.ORDER_LINE = LINES.ORDER_LINE","LINES.CUSTOMER*!*LINES.ORDER_NO*!*LINES.ORDER_LINE*!*LINES.DATE_DUE*!*SCHED.MULT_QTY_SEQ*!*LINES.YEAR_DUE*!*LINES.MONTH_DUE*!*LINES.DAY_DUE*!*LINES.PART_NUM*!*LINES.REV*!*LINES.LOC*!*LINES.UM_ORDER*!*LINES.QTY_ORDERED*!*SCHED.QTY_OPEN as QTY_BO*!*LINES.PRICE*!*LINES.COST*!*LINES.AMT_DISCOUNT",,,"SCHED.ORDER_NO asc,SCHED.ORDER_LINE asc,SCHED.DATE_DUE asc","dtOrdersNotScheduled",True)
		F.Intrinsic.Control.Else
			'Rev is not in use
			F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataView,"dtOrderShipSchedule","dvNotScheduled*!*SCHED",V.Enum.LinqSourceType!DataTable,"dtOrderLines*!*LINES","SCHED.ORDER_NO = LINES.ORDER_NO and SCHED.ORDER_LINE = LINES.ORDER_LINE","LINES.CUSTOMER*!*LINES.ORDER_NO*!*LINES.ORDER_LINE*!*LINES.DATE_DUE*!*SCHED.MULT_QTY_SEQ*!*LINES.YEAR_DUE*!*LINES.MONTH_DUE*!*LINES.DAY_DUE*!*LINES.PART*!*LINES.LOC*!*LINES.UM_ORDER*!*LINES.QTY_ORDERED*!*SCHED.QTY_OPEN as QTY_BO*!*LINES.PRICE*!*LINES.COST*!*LINES.AMT_DISCOUNT",,,"SCHED.ORDER_NO asc,SCHED.ORDER_LINE asc,SCHED.DATE_DUE asc","dtOrdersNotScheduled",True)
		F.Intrinsic.Control.EndIf
		F.Data.DataView.Close("dtOrderShipSchedule","dvNotScheduled")
		F.Data.DataTable.Merge("dtOrdersNotScheduled","dtOrders",True,2)
		F.Data.DataTable.Close("dtOrdersNotScheduled")
	F.Intrinsic.Control.EndIf
	' If there is a 1/1/1900 date on the OE_SHIP_SCHED, list it under the item promise due date 
	
	'-------------------------------------
	F.Intrinsic.Control.If(V.Global.bUseRev)
		'Rev is in use
		F.Data.Linq.Join(V.Enum.LinqJoinType!FullJoin,V.Enum.LinqSourceType!DataTable,"dtOrderShipSchedule*!*SCHED",V.Enum.LinqSourceType!DataTable,"dtOrderLines*!*LINES","SCHED.ORDER_NO = LINES.ORDER_NO and SCHED.ORDER_LINE = LINES.ORDER_LINE","LINES.CUSTOMER*!*LINES.ORDER_NO*!*LINES.ORDER_LINE*!*LINES.DATE_DUE*!*SCHED.MULT_QTY_SEQ*!*LINES.YEAR_DUE*!*LINES.MONTH_DUE*!*LINES.DAY_DUE*!*LINES.PART_NUM*!*LINES.REV*!*LINES.LOC*!*LINES.UM_ORDER*!*LINES.QTY_ORDERED*!*LINES.QTY_BO*!*LINES.PRICE*!*LINES.COST*!*LINES.AMT_DISCOUNT",,,"SCHED.ORDER_NO asc,SCHED.ORDER_LINE asc,SCHED.DATE_DUE asc","dtOrdersNotScheduled",True)
	F.Intrinsic.Control.Else
		'Rev is not in use
		F.Data.Linq.Join(V.Enum.LinqJoinType!FullJoin,V.Enum.LinqSourceType!DataTable,"dtOrderShipSchedule*!*SCHED",V.Enum.LinqSourceType!DataTable,"dtOrderLines*!*LINES","SCHED.ORDER_NO = LINES.ORDER_NO and SCHED.ORDER_LINE = LINES.ORDER_LINE","LINES.CUSTOMER*!*LINES.ORDER_NO*!*LINES.ORDER_LINE*!*LINES.DATE_DUE*!*SCHED.MULT_QTY_SEQ*!*LINES.YEAR_DUE*!*LINES.MONTH_DUE*!*LINES.DAY_DUE*!*LINES.PART*!*LINES.LOC*!*LINES.UM_ORDER*!*LINES.QTY_ORDERED*!*LINES.QTY_BO*!*LINES.PRICE*!*LINES.COST*!*LINES.AMT_DISCOUNT",,,"SCHED.ORDER_NO asc,SCHED.ORDER_LINE asc,SCHED.DATE_DUE asc","dtOrdersNotScheduled",True)
	F.Intrinsic.Control.EndIf
	F.Data.DataView.Create("dtOrdersNotScheduled","dvNoShipSchedule")
	F.Data.DataView.SetFilter("dtOrdersNotScheduled","dvNoShipSchedule","isnull(MULT_QTY_SEQ, -1) = -1")
	F.Data.DataView.ToDataTable("dtOrdersNotScheduled","dvNoShipSchedule","dtOrdersNotScheduleddvNoShipSchedule",True)
	F.Data.DataTable.Close("dtOrdersNotScheduled")
	F.Data.DataTable.Merge("dtOrdersNotScheduleddvNoShipSchedule","dtOrders",True,2)
	F.Data.DataTable.Close("dtOrdersNotScheduleddvNoShipSchedule")
	' If there isn't an entry for a line on the OE_SHIP_SCHED, list it with it's item promise due date
	
	F.Data.DataTable.Close("dtOrderLines")
	F.Data.DataTable.Close("dtOrderShipSchedule")
F.Intrinsic.Control.EndIf
' use the radio options to determine how to build the dtOrders datatable

'-------------------------------------
F.Data.DataTable.AddExpressionColumn("dtOrders","DATE_DUE_STR","String","TRIM(YEAR_DUE) + TRIM(MONTH_DUE) + TRIM(DAY_DUE)")
F.Intrinsic.String.Build("IIF(DATE_DUE_STR < '{0}', '{6}', IIF(DATE_DUE_STR >= '{0}' and DATE_DUE_STR <= '{1}', '{7}', IIF(DATE_DUE_STR >= '{2}' and DATE_DUE_STR <= '{3}', '{8}', IIF(DATE_DUE_STR >= '{4}' and DATE_DUE_STR <= '{5}', '{9}', '{10}'))))",V.Ambient.Date.FormatYYYYMMDD,V.Local.d30.FormatYYYYMMDD,V.Local.d31.FormatYYYYMMDD,V.Local.d60.FormatYYYYMMDD,V.Local.d61.FormatYYYYMMDD,V.Local.d90.FormatYYYYMMDD,V.Global.sLate,V.Global.s0to30,V.Global.s31to60,V.Global.s61to90,V.Global.s91andUp,V.Local.sExpression)
F.Data.DataTable.AddExpressionColumn("dtOrders","DUE_RANK","String",V.Local.sExpression)
' categorize each datarow into the respective date category

'-------------------------------------
F.Intrinsic.Control.If(V.Screen.F_Main!chkOrderCost.CheckedAsBoolean)
	F.Data.DataTable.AddExpressionColumn("dtOrders","EXTENSION","Float","(QTY_BO * PRICE) - (QTY_BO * COST)")
F.Intrinsic.Control.Else
	F.Data.DataTable.AddExpressionColumn("dtOrders","EXTENSION","Float","QTY_BO * PRICE")
F.Intrinsic.Control.EndIf
' Add calculation for remaining revenue based on checkbox

'-------------------------------------
F.Intrinsic.String.Build("ORDERS.DUE_RANK = '{0}'",V.Global.sLate,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS",V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS2","ORDERS.ORDER_NO = ORDERS2.ORDER_NO and ORDERS.ORDER_LINE = ORDERS2.ORDER_LINE and ORDERS.DATE_DUE = ORDERS2.DATE_DUE and ORDERS.MULT_QTY_SEQ = ORDERS2.MULT_QTY_SEQ","ORDERS.CUSTOMER*!*SUM(ORDERS.EXTENSION) as SLATE_TOT",V.Local.sFilter,"ORDERS.CUSTOMER",,"dtOrdLateAg",False)
F.Intrinsic.String.Build("ORDERS.DUE_RANK = '{0}'",V.Global.s0to30,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS",V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS2","ORDERS.ORDER_NO = ORDERS2.ORDER_NO and ORDERS.ORDER_LINE = ORDERS2.ORDER_LINE and ORDERS.DATE_DUE = ORDERS2.DATE_DUE and ORDERS.MULT_QTY_SEQ = ORDERS2.MULT_QTY_SEQ","ORDERS.CUSTOMER*!*SUM(ORDERS.EXTENSION) as S0TO30_TOT",V.Local.sFilter,"ORDERS.CUSTOMER",,"dtOrd0to30Ag",False)
F.Intrinsic.String.Build("ORDERS.DUE_RANK = '{0}'",V.Global.s31to60,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS",V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS2","ORDERS.ORDER_NO = ORDERS2.ORDER_NO and ORDERS.ORDER_LINE = ORDERS2.ORDER_LINE and ORDERS.DATE_DUE = ORDERS2.DATE_DUE and ORDERS.MULT_QTY_SEQ = ORDERS2.MULT_QTY_SEQ","ORDERS.CUSTOMER*!*SUM(ORDERS.EXTENSION) as S31TO60_TOT",V.Local.sFilter,"ORDERS.CUSTOMER",,"dtOrd31to60Ag",False)
F.Intrinsic.String.Build("ORDERS.DUE_RANK = '{0}'",V.Global.s61to90,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS",V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS2","ORDERS.ORDER_NO = ORDERS2.ORDER_NO and ORDERS.ORDER_LINE = ORDERS2.ORDER_LINE and ORDERS.DATE_DUE = ORDERS2.DATE_DUE and ORDERS.MULT_QTY_SEQ = ORDERS2.MULT_QTY_SEQ","ORDERS.CUSTOMER*!*SUM(ORDERS.EXTENSION) as S61TO90_TOT",V.Local.sFilter,"ORDERS.CUSTOMER",,"dtOrd61to90Ag",False)
F.Intrinsic.String.Build("ORDERS.DUE_RANK = '{0}'",V.Global.s91andUp,V.Local.sFilter)
F.Data.Linq.Join(V.Enum.LinqJoinType!InnerJoin,V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS",V.Enum.LinqSourceType!DataTable,"dtOrders*!*ORDERS2","ORDERS.ORDER_NO = ORDERS2.ORDER_NO and ORDERS.ORDER_LINE = ORDERS2.ORDER_LINE and ORDERS.DATE_DUE = ORDERS2.DATE_DUE and ORDERS.MULT_QTY_SEQ = ORDERS2.MULT_QTY_SEQ","ORDERS.CUSTOMER*!*SUM(ORDERS.EXTENSION) as S91ANDUP_TOT",V.Local.sFilter,"ORDERS.CUSTOMER",,"dtOrd91andUpAg",False)
' coalesce data to get sum totals of each category for each customer

'-------------------------------------
F.Data.DataTable.Create("dtCustList",False)
F.Data.DataTable.AddColumn("dtCustList","CUSTOMER","String")
F.Data.DataTable.Merge("dtOrdLateAg","dtCustList",True,2)
F.Data.DataTable.Merge("dtOrd0to30Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtOrd31to60Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtOrd61to90Ag","dtCustList",True,2)
F.Data.DataTable.Merge("dtOrd91andUpAg","dtCustList",True,2)
F.Data.DataView.Create("dtCustList","dvDistinct")
F.Data.DataView.SetSort("dtCustList","dvDistinct","CUSTOMER desc")
F.Data.DataView.ToDataTableDistinct("dtCustList","dvDistinct","dtCustListDist","CUSTOMER")
' parse customers datatable to get list of customers that have orders

'-------------------------------------
F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtCustListDist*!*CUSTLIST",V.Enum.LinqSourceType!DataTable,"dtCustomers*!*CUST","CUSTLIST.CUSTOMER = CUST.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtOrdLateAg*!*LATE","CUST.CUSTOMER = LATE.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtOrd0to30Ag*!*ZERO","CUST.CUSTOMER = ZERO.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtOrd31to60Ag*!*THIRTY","CUST.CUSTOMER = THIRTY.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtOrd61to90Ag*!*SIXTY","CUST.CUSTOMER = SIXTY.CUSTOMER",V.Enum.LinqSourceType!DataTable,"dtOrd91andUpAg*!*NINETY","CUST.CUSTOMER = NINETY.CUSTOMER","CUST.CUSTOMER*!*CUST.CUST_NAME*!*LATE.SLATE_TOT*!*ZERO.S0TO30_TOT*!*THIRTY.S31TO60_TOT*!*SIXTY.S61TO90_TOT*!*NINETY.S91ANDUP_TOT",,,"CUST.CUSTOMER","dtOrdersAg",True)
F.Data.DataTable.Close("dtCustList")
F.Data.DataTable.Close("dtCustomers")
F.Data.DataTable.Close("dtOrdLateAg")
F.Data.DataTable.Close("dtOrd0to30Ag")
F.Data.DataTable.Close("dtOrd31to60Ag")
F.Data.DataTable.Close("dtOrd61to90Ag")
F.Data.DataTable.Close("dtOrd91andUpAg")
' combine coalesced totals into on aggregate dataset

'-------------------------------------
F.Data.DataTable.AddExpressionColumn("dtOrdersAg","ORD_TOT","Float","ISNULL(SLATE_TOT, 0) + ISNULL(S0TO30_TOT, 0) + ISNULL(S31TO60_TOT, 0) + ISNULL(S61TO90_TOT, 0) + ISNULL(S91ANDUP_TOT, 0)")
' calculate total for each customer across all groups

'-------------------------------------
F.Data.DataTable.Compute("dtOrdersAg","Sum(ORD_TOT)","",V.Local.fBacklogTot)
F.Intrinsic.String.Build("ORD_TOT / {0}",V.Local.fBacklogTot.String,V.Local.sExpression)
F.Data.DataTable.AddExpressionColumn("dtOrdersAg","ORD_PER","Float",V.Local.sExpression)
' calculate sales expression column

'-------------------------------------
F.Data.DataView.Create("dtOrders","dvChild")
F.Data.DataView.ToDataTable("dtOrders","dvChild","dtOrdersAg$dtOrders",True)
F.Data.DataTable.Close("dtOrders")
' convert order lines dataset into a child table

'-------------------------------------
F.Data.DataTable.AddRelation("dtOrdersAg","CUSTOMER","dtOrdersAg$dtOrders","CUSTOMER","OrdersList")
F.Data.DataView.Create("dtOrdersAg$dtOrders","dvOrdersList")
' add relation between aggregate table and child table and build a child dataview to add to gridview

'-------------------------------------
F.Intrinsic.Control.If(V.Screen.F_Main!chkOrderCost.CheckedAsBoolean.Not)
	F.Data.DataTable.RemoveColumn("dtOrdersAg$dtOrders","COST")
	F.Data.DataTable.RemoveColumn("dtOrdersAg$dtOrders","AMT_DISCOUNT")
F.Intrinsic.Control.EndIf
' remove columns based on checkbox

'-------------------------------------
F.Data.DataView.Create("dtOrdersAg","dvNullFinder")
F.Data.DataView.SetFilter("dtOrdersAg","dvNullFinder","isnull(SLATE_TOT, 0) = 0")
F.Data.DataView.SetValue("dtOrdersAg","dvNullFinder",-1,"SLATE_TOT",0)
F.Data.DataView.SetFilter("dtOrdersAg","dvNullFinder","isnull(S0TO30_TOT, 0) = 0")
F.Data.DataView.SetValue("dtOrdersAg","dvNullFinder",-1,"S0TO30_TOT",0)
F.Data.DataView.SetFilter("dtOrdersAg","dvNullFinder","isnull(S31TO60_TOT, 0) = 0")
F.Data.DataView.SetValue("dtOrdersAg","dvNullFinder",-1,"S31TO60_TOT",0)
F.Data.DataView.SetFilter("dtOrdersAg","dvNullFinder","isnull(S61TO90_TOT, 0) = 0")
F.Data.DataView.SetValue("dtOrdersAg","dvNullFinder",-1,"S61TO90_TOT",0)
F.Data.DataView.SetFilter("dtOrdersAg","dvNullFinder","isnull(S91ANDUP_TOT, 0) = 0")
F.Data.DataView.SetValue("dtOrdersAg","dvNullFinder",-1,"S91ANDUP_TOT",0)
F.Data.DataView.Close("dtOrdersAg","dvNullFinder")
'Replace Nulls in aggregate table with 0's

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetOrdersDataTable.End

Program.Sub.SetupOrdersGrid.Start
F.Intrinsic.Control.Try

'-------------------------------------
Gui.F_Main.gsgcOrders.AddGridviewFromDatatable("gvOrdersAg","dtOrdersAg")
Gui.F_Main.gsgcOrders.AddGridviewFromDataview("gvOrders","dtOrdersAg","dvOrdersList")
' add aggregate and child tables to gridcontrol as gridviews

'-------------------------------------
Gui.F_Main.gsgcOrders.SetGridviewProperty("gvOrdersAg","Editable",False)
Gui.F_Main.gsgcOrders.SetGridviewProperty("gvOrdersAg","ReadOnly",True)
Gui.F_Main.gsgcOrders.SetGridviewProperty("gvOrdersAg","OptionsViewColumnAutoWidth",False)
' set aggregate gridview grid properties

'-------------------------------------
Gui.F_Main.gsgcOrders.SetGridviewProperty("gvOrders","Editable",False)
Gui.F_Main.gsgcOrders.SetGridviewProperty("gvOrders","ReadOnly",True)
Gui.F_Main.gsgcOrders.SetGridviewProperty("gvOrders","OptionsViewColumnAutoWidth",False)
' set child gridview grid properties

'-------------------------------------
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DUE_RANK","Visible",False)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","MULT_QTY_SEQ","Visible",False)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","YEAR_DUE","Visible",False)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","MONTH_DUE","Visible",False)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DAY_DUE","Visible",False)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DATE_DUE_STR","Visible",False)
' set unused fields to be invisible

'-------------------------------------
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUSTOMER","Caption","Cust No.*")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","Caption","Cust No.*")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","Visible",False)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUST_NAME","Caption","Customer")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","Caption","Late")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","Caption","0 to 30")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","Caption","31 to 60")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","Caption","61 to 90")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","Caption","90 +")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","Caption","Total")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","Caption","% of Backlog")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_NO","Caption","Order No.*")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_LINE","Caption","Order Line")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DATE_DUE","Caption","Due Date")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART_NUM","Caption","Part Number*")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","REV","Caption","Rev*")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART","Caption","Part Number*")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","LOC","Caption","Loc")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","UM_ORDER","Caption","UM")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_ORDERED","Caption","Order Qty")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_BO","Caption","Rem. Qty")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PRICE","Caption","Unit Price")
F.Intrinsic.Control.If(V.Screen.F_Main!chkOrderCost.CheckedAsBoolean)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","COST","Caption","Unit Cost")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","AMT_DISCOUNT","Caption","Unit Discount")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","EXTENSION","Caption","Amount Rem.")
F.Intrinsic.Control.If(V.Screen.F_Main!optShipSched.Value)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","SHIP_SCHED","Caption","Ship Sched.")
F.Intrinsic.Control.EndIf
' captions for both views and redundant fields on child grid view

'-------------------------------------
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUSTOMER","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUST_NAME","Width",150)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","Width",75)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_NO","Width",85)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_LINE","Width",85)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DATE_DUE","Width",90)
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART_NUM","Width",115)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","REV","Width",35)
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART","Width",155)
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","LOC","Width",35)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","UM_ORDER","Width",50)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_ORDERED","Width",95)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_BO","Width",95)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PRICE","Width",95)
F.Intrinsic.Control.If(V.Screen.F_Main!chkOrderCost.CheckedAsBoolean)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","COST","Width",95)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","AMT_DISCOUNT","Width",105)
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","EXTENSION","Width",105)
F.Intrinsic.Control.If(V.Screen.F_Main!optShipSched.Value)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","SHIP_SCHED","Width",90)
F.Intrinsic.Control.EndIf
' widths

'-------------------------------------
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUSTOMER","HeaderHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","HeaderHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUST_NAME","HeaderHAlignment","Near")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_NO","HeaderHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_LINE","HeaderHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DATE_DUE","HeaderHAlignment","Center")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART_NUM","HeaderHAlignment","Center")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","REV","HeaderHAlignment","Center")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART","HeaderHAlignment","Center")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","LOC","HeaderHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","UM_ORDER","HeaderHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_ORDERED","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_BO","HeaderHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PRICE","HeaderHAlignment","Far")
F.Intrinsic.Control.If(V.Screen.F_Main!chkOrderCost.CheckedAsBoolean)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","COST","HeaderHAlignment","Far")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","AMT_DISCOUNT","HeaderHAlignment","Far")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","EXTENSION","HeaderHAlignment","Far")
F.Intrinsic.Control.If(V.Screen.F_Main!optShipSched.Value)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","SHIP_SCHED","HeaderHAlignment","Center")
F.Intrinsic.Control.EndIf
' header horizontal alignment

'-------------------------------------
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUSTOMER","CellHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","CellHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUST_NAME","CellHAlignment","Near")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_NO","CellHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_LINE","CellHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DATE_DUE","CellHAlignment","Center")
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART_NUM","CellHAlignment","Center")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","REV","CellHAlignment","Center")
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART","CellHAlignment","Center")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","LOC","CellHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","UM_ORDER","CellHAlignment","Center")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_ORDERED","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_BO","CellHAlignment","Far")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PRICE","CellHAlignment","Far")
F.Intrinsic.Control.If(V.Screen.F_Main!chkOrderCost.CheckedAsBoolean)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","COST","CellHAlignment","Far")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","AMT_DISCOUNT","CellHAlignment","Far")
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","EXTENSION","CellHAlignment","Far")
F.Intrinsic.Control.If(V.Screen.F_Main!optShipSched.Value)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","SHIP_SCHED","CellHAlignment","Center")
F.Intrinsic.Control.EndIf
' cell horizontal alignment

Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorRed.Plus)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorYellow.Plus)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorGreen.Plus)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorBlue.Plus)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","HeaderForeColor",V.Enum.ThemeColors!ColorPurple.Plus)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","HeaderFontBold",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","HeaderFontBold",True)

'-------------------------------------
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","DATE_DUE","DisplayCustomDateTime","d")
' set date formats

'-------------------------------------
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","SLATE_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S0TO30_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S31TO60_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S61TO90_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","S91ANDUP_TOT","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_TOT","EditMaskAsDisplayFormat",True)
'Percentage
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","EditMask","###0.0000%")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","ORD_PER","EditMaskAsDisplayFormat",True)
'Float
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_ORDERED","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_ORDERED","EditMask","#,###,##0.0000")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_ORDERED","EditMaskAsDisplayFormat",True)
'Float
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_BO","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_BO","EditMask","#,###,##0.0000")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","QTY_BO","EditMaskAsDisplayFormat",True)
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PRICE","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PRICE","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PRICE","EditMaskAsDisplayFormat",True)
F.Intrinsic.Control.If(V.Screen.F_Main!chkOrderCost.CheckedAsBoolean)
	'Currency
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","COST","EditMaskType","Numeric")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","COST","EditMask","$ #,###,###,##0.00")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","COST","EditMaskAsDisplayFormat",True)
	'Currency
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","AMT_DISCOUNT","EditMaskType","Numeric")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","AMT_DISCOUNT","EditMask","$ #,###,###,##0.00")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","AMT_DISCOUNT","EditMaskAsDisplayFormat",True)
F.Intrinsic.Control.EndIf
'Currency
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","EXTENSION","EditMaskType","Numeric")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","EXTENSION","EditMask","$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","EXTENSION","EditMaskAsDisplayFormat",True)
' set number format

'-------------------------------------
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUSTOMER","IsHyperlink",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUSTOMER","ToolTip","*Double-click to open")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrdersAg","CUSTOMER","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","IsHyperlink",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","ToolTip","*Double-click to open")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","CUSTOMER","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.If(V.Global.bUseRev)
	'Rev is in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART_NUM","IsHyperlink",True)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART_NUM","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART_NUM","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","REV","IsHyperlink",True)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","REV","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","REV","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.Else
	'Rev is not in use
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART","IsHyperlink",True)
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART","ToolTip","*Double-click to open")
	Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","PART","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
F.Intrinsic.Control.EndIf
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_NO","IsHyperlink",True)
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_NO","ToolTip","*Double-click to open")
Gui.F_Main.gsgcOrders.SetColumnProperty("gvOrders","ORDER_NO","CellBackColor",V.Enum.ThemeColors!ColorLightGray.Highlight)
' clickable fields

'-------------------------------------
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrdersAg","SLATE_TOT","LATERANK","NotEqual",0)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrders","DUE_RANK","LATERANKORD","Equal",V.Global.sLate)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrdersAg","SLATE_TOT","LATERANK","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","LATERANKORD","BackColor",V.Enum.ThemeColors!ColorRed.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","LATERANKORD","ApplyToRow",True)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrdersAg","S0TO30_TOT","S0TO30RANK","NotEqual",0)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrders","DUE_RANK","S0TO30RANKORD","Equal",V.Global.s0to30)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrdersAg","S0TO30_TOT","S0TO30RANK","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S0TO30RANKORD","BackColor",V.Enum.ThemeColors!ColorYellow.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S0TO30RANKORD","ApplyToRow",True)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrdersAg","S31TO60_TOT","S31TO60RANK","NotEqual",0)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrders","DUE_RANK","S31TO60RANKORD","Equal",V.Global.s31to60)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrdersAg","S31TO60_TOT","S31TO60RANK","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S31TO60RANKORD","BackColor",V.Enum.ThemeColors!ColorGreen.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S31TO60RANKORD","ApplyToRow",True)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrdersAg","S61TO90_TOT","S61TO90RANK","NotEqual",0)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrders","DUE_RANK","S61TO90RANKORD","Equal",V.Global.s61to90)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrdersAg","S61TO90_TOT","S61TO90RANK","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S61TO90RANKORD","BackColor",V.Enum.ThemeColors!ColorBlue.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S61TO90RANKORD","ApplyToRow",True)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrdersAg","S91ANDUP_TOT","S91ANDUPRANK","NotEqual",0)
Gui.F_Main.gsgcOrders.AddStyleFormatCondition("gvOrders","DUE_RANK","S91ANDUPRANKORD","Equal",V.Global.s91andUp)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrdersAg","S91ANDUP_TOT","S91ANDUPRANK","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S91ANDUPRANKORD","BackColor",V.Enum.ThemeColors!ColorPurple.Highlight)
Gui.F_Main.gsgcOrders.SetStyleFormatConditionProperty("gvOrders","DUE_RANK","S91ANDUPRANKORD","ApplyToRow",True)
' set cell background colors to cross reference groups on the aggregate table to the datarows in the child table

'-------------------------------------
Gui.F_Main.gsgcOrders.AddSummaryItem("gvOrdersAg","SLATE_TOT","LateTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.AddSummaryItem("gvOrdersAg","S0TO30_TOT","ZeroToThirtyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.AddSummaryItem("gvOrdersAg","S31TO60_TOT","ThirtyToSixtyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.AddSummaryItem("gvOrdersAg","S61TO90_TOT","SixtyToNinetyTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.AddSummaryItem("gvOrdersAg","S91ANDUP_TOT","NinetyPlusTotal","Sum","Total: ",,"$ #,###,###,##0.00")
Gui.F_Main.gsgcOrders.AddSummaryItem("gvOrdersAg","ORD_TOT","TotalTotal","Sum","Total: ",,"$ #,###,###,##0.00")
' add sum totals for the data groups to the bottom of the grid

'-------------------------------------
Gui.F_Main.gsgcOrders.MainView("gvOrdersAg")
' view grid

Gui.F_Main.gsgcOrders.TabStop(True)
Gui.F_Main.gsgcOrders.TabIndex(4)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SetupOrdersGrid.End

Program.Sub.SerializeOrders.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVORDERSAG
Gui.F_Main.gsgcOrders.Serialize("gvOrdersAg",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVORDERSAG",5784,6000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

'GridView - GVORDERS
Gui.F_Main.gsgcOrders.Serialize("gvOrders",V.Local.Serialize)
F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVORDERS",5784,7000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.Serialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SerializeOrders.End

Program.Sub.DeserializeOrders.Start
V.Local.Serialize.Declare
F.Intrinsic.Control.Try

'GridView - GVORDERSAG
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVORDERSAG",5784,6000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcOrders.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

'GridView - GVORDERS
F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVORDERS",5784,7000,6,"",V.Local.Serialize)
F.Intrinsic.Control.If(V.Local.Serialize.Trim,<>,"")
	Gui.F_Main.gsgcOrders.Deserialize(V.Local.Serialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.DeserializeOrders.End

Program.Sub.gsgcOrders_RowCellClick.Start
V.Local.sDataTable.Declare
V.Local.sPart.Declare
V.Local.sSQL.Declare
V.Local.sPath.Declare
V.Local.bExists.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.Args.Clicks,!=,2,"or",V.Args.Button.UCase,!=,"LEFT") 
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
' verify clicking conditions

'-------------------------------------
Gui.F_Main.gsgcOrders.GetFocusedGridview(V.Local.sDataTable)
F.Intrinsic.Control.If(V.Local.sDataTable.UCase,=,"DTORDERS")
	V.Local.sDataTable.Set("dtOrdersAg$dtOrders")
F.Intrinsic.Control.EndIf
' dashboard contains 2 views so parse for dataset and correct child datatable if it is active

'-------------------------------------
F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
	F.Intrinsic.Control.CaseAny("PART_NUM","REV")
		'Open Supply and Demand Screen
		F.Intrinsic.String.GSSPartString(V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).PART_NUM!FieldVal,V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).REV!FieldVal,V.Local.sPart)
		F.Intrinsic.String.Build("{0}bin\SupplyAndDemand.exe",V.Caller.LocalGSSTempDir,V.Local.sPath)
		F.Intrinsic.File.Exists(V.Local.sPath,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBER",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).PART_NUM!FieldVal)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBERREVISION",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).REV!FieldVal)
			F.Intrinsic.Task.SetEnvironmentVariable("LOCATIONCODE",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Task.LaunchAsync(V.Local.sPath,1,V.Local.sPath)
		F.Intrinsic.Control.Else
			F.Data.DataTable.AddRow("300011","Part",V.Local.sPart,"Location",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal,"Switch","")
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(300011Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("PART")
		'Open Supply and Demand Screen
		F.Intrinsic.String.Build("{0}bin\SupplyAndDemand.exe",V.Caller.LocalGSSTempDir,V.Local.sPath)
		F.Intrinsic.File.Exists(V.Local.sPath,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists)
			F.Intrinsic.Task.SetEnvironmentVariable("PARTNUMBER",V.Args.CellValue)
			F.Intrinsic.Task.SetEnvironmentVariable("LOCATIONCODE",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Task.LaunchAsync(V.Local.sPath,1,V.Local.sPath)
		F.Intrinsic.Control.Else
			F.Data.DataTable.AddRow("300011","Part",V.Args.CellValue,"Location",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).LOC!FieldVal,"Switch","")
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(300011Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("ORDER_NO")
		'-------------------------------------
		F.Intrinsic.String.Build("select 1 from V_ORDER_HEADER where ORDER_NO = '{0}';",V.Args.CellValue,V.Local.sSQL)
		F.ODBC.Connection!con.OpenCompanyConnection
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
		F.ODBC.Connection!con.Close
		' check if order is active or in history
		
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
			'Open Order History Screen
			F.Data.DataTable.AddRow("7070","Order",V.Args.CellValue,"Customer",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).CUSTOMER!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(7070Sync)
		F.Intrinsic.Control.Else
			'Open Order Header Screen
			F.Data.DataTable.AddRow("200000","OrdNum",V.Args.CellValue,"Mode","V","CustNum",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).CUSTOMER!FieldVal)
			Gui.F_Main..Enabled(False)
			F.Intrinsic.Control.CallSub(200000Sync)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("CUSTOMER")
		'Open Customer Master Screen
		F.Data.DataTable.AddRow("100000","Mode","V","ProspectFlag","","Customer",V.Args.CellValue)
		Gui.F_Main..Enabled(False)
		F.Intrinsic.Control.CallSub(100000Sync)
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.gsgcOrders_RowCellClick.End

Program.Sub.cmdCashRefresh_Debug.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCashAcctSumm.Exists)
	F.Intrinsic.Control.CallSub(SerializeCashAccounts)
	F.Data.DataTable.Close("dtCashAcctSumm")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtARAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAR)
	F.Data.DataTable.Close("dtARAgingAg$dtARAging")
	F.Data.DataTable.Close("dtARAgingAg")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.DataTable.dtAPAgingAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeAP)
	F.Data.DataTable.Close("dtAPAgingAg$dtAPAging")
	F.Data.DataTable.Close("dtAPAgingAg")
F.Intrinsic.Control.EndIf
' Serialize and close AR aging, AP aging and Cash Accounts Summary dashboards

Gui.F_Main..Enabled(False)

Gui.F_Main.progressPanelCashFlow.Caption("Please wait")
Gui.F_Main.progressPanelCashFlow.Detail("Getting cash accounts data")
Gui.F_Main.progressPanelCashFlow.Visible(True)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetCashAccountsDataTable,"Debug",True)
' Build dtCashAcctSumm table
Gui.F_Main.progressPanelCashFlow.Detail("Getting AR aging data")
'-------------------------------------
F.Intrinsic.Control.CallSub(GetARAgingDataTable,"Debug",True)
' Build dtARAging and dtARAgingAg tables
Gui.F_Main.progressPanelCashFlow.Detail("Getting AP aging data")
'-------------------------------------
F.Intrinsic.Control.CallSub(GetAPAgingDataTable,"Debug",True)
' Build dtAPAging and dtAPAgingAg tables

Gui.F_Main.progressPanelCashFlow.Detail("Setting up dashboard views")
'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCashAcctSumm.Exists)
	F.Intrinsic.Control.CallSub(SetupCashAccountsGrid)
	F.Intrinsic.Control.CallSub(DeserializeCashAccounts)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(SetupARGrid)
F.Intrinsic.Control.CallSub(DeserializeAR)
F.Intrinsic.Control.CallSub(SetupAPGrid)
F.Intrinsic.Control.CallSub(DeserializeAP)
' initialize and format grids before deserializing

Gui.F_Main.progressPanelCashFlow.Visible(False)

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdCashRefresh_Debug.End

Program.Sub.ExpandOrderRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtOrdersAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcOrders.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtOrdersAg.RowCount--,1)
		Gui.F_Main.gsgcOrders.ExpandMasterRow("gvOrdersAg",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcOrders.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' expand all expandable rows on orders dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ExpandOrderRows.End

Program.Sub.CollapseOrderRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtOrdersAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcOrders.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtOrdersAg.RowCount--,1)
		Gui.F_Main.gsgcOrders.CollapseMasterRow("gvOrdersAg",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcOrders.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' collapse all expanded rows on orders dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.CollapseOrderRows.End

Program.Sub.cmdOrdersRefresh_Debug.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtOrdersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeOrders)
	F.Data.DataTable.Close("dtOrdersAg$dtOrders")
	F.Data.DataTable.Close("dtOrdersAg")
F.Intrinsic.Control.EndIf
' serialize and close order datatables if they exist

Gui.F_Main..Enabled(False)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetOrdersDataTable,"Debug",True)
' returns dtOrdersAg and dtOrdersAg$dtOrders

'-------------------------------------
F.Intrinsic.Control.CallSub(SetupOrdersGrid)
' put the data tables on the grid

'-------------------------------------
F.Intrinsic.Control.CallSub(DeserializeOrders)
' load previous grid settings for grid if they exist

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdOrdersRefresh_Debug.End

Program.Sub.cmdShipRefresh_Debug.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtShip.Exists)
	F.Intrinsic.Control.CallSub(SerializeShipping)
	F.Data.DataTable.Close("dtShip")
F.Intrinsic.Control.EndIf
' Serialize and close shipping dashboard

Gui.F_Main..Enabled(False)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetShippingDataTable,"StartDate",V.Screen.F_Main!dtpShipBeg.Value,"EndDate",V.Screen.F_Main!dtpShipEnd.Value,"Debug",True)
' Build dtShipAg and dtShipAg$dtShipList

'-------------------------------------
F.Intrinsic.Control.CallSub(SetupShippingGrid)
F.Intrinsic.Control.CallSub(DeserializeShipping)
' initialize dashboard and format before deserializing

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdShipRefresh_Debug.End

Program.Sub.cmdJobRefresh_Debug.Start
'Refresh current back log valuation view
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtCustomersAg.Exists)
	F.Intrinsic.Control.CallSub(SerializeJobs)
	F.Data.DataTable.Close("dtCustomersAg$dtJobs")
	F.Data.DataTable.Close("dtCustomersAg")
F.Intrinsic.Control.EndIf
' serialize and close job dashboard

Gui.F_Main..Enabled(False)

'-------------------------------------
F.Intrinsic.Control.CallSub(GetOpenJobDataTable,"Debug",True)
' build job datatables dtCustomersAg and dtCustomersAg$dtJobs

'-------------------------------------
F.Intrinsic.Control.CallSub(SetupJobsGrid)
F.Intrinsic.Control.CallSub(DeserializeJobs)
' initialize and foramt dashboard

Gui.F_Main..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.cmdJobRefresh_Debug.End

Program.Sub.gsgcAR_RowCellClick.Start
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.Args.Clicks,!=,2,"or",V.Args.Button.UCase,!=,"LEFT") 
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
' verify clicking conditions

'Datatable check is not needed since CUSTOMER is the only clickable field on this grid

F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
	F.Intrinsic.Control.Case("CUSTOMER")
		'Open Customer Master Screen
		F.Data.DataTable.AddRow("100000","Mode","V","ProspectFlag","","Customer",V.Args.CellValue)
		Gui.F_Main..Enabled(False)
		F.Intrinsic.Control.CallSub(100000Sync)
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.gsgcAR_RowCellClick.End

Program.Sub.gsgcAP_RowCellClick.Start
V.Local.sDataTable.Declare
V.Local.sSQL.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.Args.Clicks,!=,2,"or",V.Args.Button.UCase,!=,"LEFT") 
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
' verify clicking conditions

'-------------------------------------
Gui.F_Main.gsgcAP.GetFocusedGridview(V.Local.sDataTable)
F.Intrinsic.Control.If(V.Local.sDataTable.UCase,=,"DTAPAGING")
	V.Local.sDataTable.Set("dtAPAgingAg$dtAPAging")
F.Intrinsic.Control.EndIf
' dashboard contains 2 views so parse for dataset and correct child datatable if it is active

F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
	F.Intrinsic.Control.Case("VENDOR")
		'Open Vendor Master Screen
		F.Global.Callwrapper.New("OpenVendorHeader","Accounting.AccountsPayable.VendorMaintenanceOpenVendor")
		F.Global.Callwrapper.SetProperty("OpenVendorHeader","VendorNumber",V.Args.CellValue)
		Gui.F_Main..Enabled(False)
		F.Global.CallWrapper.Run("OpenVendorHeader")
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
	F.Intrinsic.Control.Case("PURCHASE_ORDER")
		'Open PO Master Screen OR PO History Screen
		F.Intrinsic.Control.If(V.Args.CellValue.Trim,=,"")
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
		'-------------------------------------
		F.Intrinsic.String.Build("select 1 from V_PO_HEADER where PURCHASE_ORDER = '{1}';",V.Args.CellValue,V.Local.sSQL)
		F.ODBC.Connection!con.OpenCompanyConnection
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
		F.ODBC.Connection!con.Close
		'check if PO is in the open tables or history
		
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
			'PO is in history
			F.Data.DataTable.AddRow("175200","Mode","H","PONum",V.Args.CellValue,"VendNum",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).VENDOR!FieldVal)
		F.Intrinsic.Control.Else
			'PO is still active
			F.Data.DataTable.AddRow("175200","Mode","V","PONum",V.Args.CellValue,"VendNum",V.DataTable.[V.Local.sDataTable](V.Args.RowIndex).VENDOR!FieldVal)
		F.Intrinsic.Control.EndIf
		Gui.F_Main..Enabled(False)
		F.Intrinsic.Control.CallSub(175200Sync)
		Gui.F_Main..Enabled(True)
		Gui.F_Main..SetFocus
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.gsgcAP_RowCellClick.End

Program.Sub.ExpandARRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtARAgingAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcAR.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtARAgingAg.RowCount--,1)
		Gui.F_Main.gsgcAR.ExpandMasterRow("gvARTot",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcAR.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' expand all expandable rows on AR dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ExpandARRows.End

Program.Sub.CollapseARRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtARAgingAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcAR.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtARAgingAg.RowCount--,1)
		Gui.F_Main.gsgcAR.CollapseMasterRow("gvARTot",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcAR.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' collapse all expanded rows on AR dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.CollapseARRows.End

Program.Sub.ExpandAPRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtAPAgingAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcAP.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtAPAgingAg.RowCount--,1)
		Gui.F_Main.gsgcAP.ExpandMasterRow("gvAPTot",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcAP.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' expand all expandable rows on AP dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ExpandAPRows.End

Program.Sub.CollapseAPRows.Start
V.Local.iCnt.Declare
F.Intrinsic.Control.Try

'-------------------------------------
F.Intrinsic.Control.If(V.DataTable.dtAPAgingAg.Exists)
	Gui.F_Main..Enabled(False)
	Gui.F_Main.gsgcAP.Visible(False)
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtAPAgingAg.RowCount--,1)
		Gui.F_Main.gsgcAP.CollapseMasterRow("gvAPTot",V.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	Gui.F_Main.gsgcAP.Visible(True)
	Gui.F_Main..Enabled(True)
F.Intrinsic.Control.EndIf
' collapse all expanded rows on AP dashboard

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage,"ScriptFile",V.Caller.ScriptFile,"CurrentSubroutine",V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.CollapseAPRows.End

Program.Sub.ExportOrder.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcOrders")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"csv")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
F.Intrinsic.Control.EndIf

Program.Sub.ExportOrder.End

Program.Sub.ExportOrderDetails.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcOrders")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_ExportDetails_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		'[V.Local.sForm].[V.Local.sControl]
		Gui.F_Main.gsgcOrders.ExportDetails("xlsx",V.Local.sFileExport,1)
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("Excel needs to be installed to use this functionality.")
F.Intrinsic.Control.EndIf

Program.Sub.ExportOrderDetails.End

Program.Sub.ExportJob.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcJob")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"csv")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
F.Intrinsic.Control.EndIf

Program.Sub.ExportJob.End

Program.Sub.ExportJobDetails.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcJob")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_ExportDetails_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		'[V.Local.sForm].[V.Local.sControl]
		Gui.F_Main.gsgcOrders.ExportDetails("xlsx",V.Local.sFileExport,1)
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("Excel needs to be installed to use this functionality.")
F.Intrinsic.Control.EndIf

Program.Sub.ExportJobDetails.End

Program.Sub.ExportAR.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcAR")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"csv")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
F.Intrinsic.Control.EndIf

Program.Sub.ExportAR.End

Program.Sub.ExportARDetails.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcAR")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_ExportDetails_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		'[V.Local.sForm].[V.Local.sControl]
		Gui.F_Main.gsgcOrders.ExportDetails("xlsx",V.Local.sFileExport,1)
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("Excel needs to be installed to use this functionality.")
F.Intrinsic.Control.EndIf

Program.Sub.ExportARDetails.End

Program.Sub.ExportAP.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcAP")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"xlsx")
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_Export_{2}_{3}.csv",V.Caller.LocalGssTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		Gui.[V.Local.sForm].[V.Local.sControl].Export(V.Local.sFileExport,"csv")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
F.Intrinsic.Control.EndIf

Program.Sub.ExportAP.End

Program.Sub.ExportAPDetails.Start
V.Local.sForm.Declare(String, "F_Main")
V.Local.sControl.Declare(String, "gsgcAP")
V.Local.sFileExport.Declare
V.Local.sMsg.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.bExcel.Declare
V.Local.bFileLocked.Declare

'Arc Number - 5784
F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
F.Intrinsic.String.DateString(V.Ambient.Date,V.Local.sDate)
F.Intrinsic.String.TimeString(V.Ambient.Time,V.Local.sTime)
F.Intrinsic.Control.If(V.Local.bExcel)
	F.Intrinsic.String.Build("{0}\GCG_5784_{1}_ExportDetails_{2}_{3}.xlsx",V.Caller.LocalGSSTempDir,V.Local.sControl,V.Local.sDate,V.Local.sTime,V.Local.sFileExport)
	F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
	F.Intrinsic.Control.If(V.Local.bFileLocked)
		F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File : {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
		F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
	F.Intrinsic.Control.Else
		'[V.Local.sForm].[V.Local.sControl]
		Gui.F_Main.gsgcOrders.ExportDetails("xlsx",V.Local.sFileExport,1)
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("Excel needs to be installed to use this functionality.")
F.Intrinsic.Control.EndIf

Program.Sub.ExportAPDetails.End

Program.Sub.Comments.Start
${$5$}$20.1.8678.25831$}$0
${$6$}$bbaker$}$20231107120916878$}$pM7xsHplA2E9VCTenDTJ47gi1rF/t66WLTER2fH7l9hRPB/MbN73umOUdj3xzfdXOYD4XHAeJ9Y=
Program.Sub.Comments.End